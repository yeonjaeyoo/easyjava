전자 메일 => 이메일?

이메일 통신은 지난 몇 십년 동안 정보 교환의 주요한 방식이 됐다.

하지 않을까? => 하지 않는가?

소개

안녕, 여러분. 좋은 하루 보내고 있길 희망한다.

email => 이메일

유스 케이스의 도움을 받아 => 사용 사례의 도움으로

이해할 것이다. => 살펴볼 것이다.

그럼 무엇을 기다리는가?

전자메일 => 이메일

그들은 => 이메일은

과거에는, 이메일이 통신이 성공하기 위해서는 발송자와 수신자가 온라인 상태여야 했다.

말이 안 된다고 생각하지?

점포 및 철학? => 가게 앞을 내다보는 철학을 공부하기 시작했다.

나중에 편리하게 => 나중에 편하게 확인할 수 있다.

이메일 메시지는 ASCII전용 문자로 시작했고, 나중에 풍부한 텍스트 및 첨부파일을 위한 MIME(Multipurpose Internet Mail Extensions)로 확장됐다.

프로토콜의 관점에서 보면, 이메일은 처음에 컴퓨터를 통해 메시지를 보내기 위해 FTP(File Transfer Protocol)로 작업했지만, 아시다 시피 SMTP(Simple Mail Transfer Protocol)는 이메일 작업에 가장 널리 사용되는 프로토콜이다.

중요표시시작

시작하는 데 => 설정을 시작하는 데

Gmail 웹 클라이언트에 적용되는 예제를 살펴보면, 여러분이 직접 이메일 서버를 설정하지 않고도 코드 예제를 신속하게 시도하고 파이썬을 사용하여 이메일 작업을 자동화할 수 있다는 것을 이해할 수 있다.
Gmail을 예제로 사용하고 있지만, 이러한 일부 정보들은 이메일 전송을 위한 SMTP와 이메일 검색을 위한 IMAP을 지원하는 다른 이메일 서버와도 연동된다.

Page 2.

중요표시시작

파이썬을 사용하여 이메일로 작업하면 메시지를 작성하는 데 도움이 되는 모듈 그리고 이메일을 전송할 수 있는 모듈, 메시지를 검색하고 업데이트하는 데 도움이 되는 모듈이 필요하다.

준비하기

선호하는 pip 도구로 smtplib를 설치할 수 있다.

실행방법

1.

조각을 => X

설정 파일에는 이메일 주소, 패스워드 및 이메일을 전송해야 하는 이메일 주소와 같은 로그인 상세 내역이 있다.

2.

환경 파일 => 설정 파일

작성해보자. => 작성하자.

Page 3.

4.

예외 => 예외(exceptions)

예외는 다음과 같다.

5.

예외(Exception)는 서버에 로그인하는 것이 좋다고 하지만 Gmail은 여러분이 메시지를 전송하는 것을 블록했다.

안정성이 => 보안성이

그래 => 예

6.

다음 스크린샷과 같이 이 설정을 설정할 수 있는 Less secure apps 페이지로 이동한다.

7.

이제 Gmail 웹 클라이언트에서 로그아웃 했다가 다시 로그인하여 이 설정이 계정에 적용되도록 한다. 이 과정이 정상적으로 진행된 경우 Google에서 Access for less secure apps이 설정됐다는 이메일을 받는다. 구글의 확인 이메일은 이 스크린샷과 유사하다.

8.

시원해 => 좋아. 유의하라, 

메시지 내용은 => 메시지 콘텐츠는 코드에 추가한 것과 같다.

사용자가 => 여러분이 전송한 것이지만, 제목이 없으므로 좋지않다.

작동원리

코드 조각을 => 코드를

Page 4.

일단 서버 객체 server가 생기면

비밀번호 => 패스워드

server.starttls() => server.starttls();

더 알아보기

기본 전자 메일을 보내는 방법을 => 기본적인 이메일 전송 방법을

이 레시피가 우리를 시작하게 하는 동안, 다음 레시피에서 자세히 조사할 것이 더 있다. 그것들을 살펴보자.

이메일 암호화

내용을 => 콘텐츠를

준비하기

레서피 => 레시피

기본 => 기본적인

작동하나? => 작동할까?

1.

코드 조각을 => 코드를

2.

부문으로 => 세그먼트로

Page 5.

3.

서버 객체에서 => server 객체에서

작동원리

이메일 암호화는 이메일 메시지가 의도한 당사자가 아닌 다른 사람이 읽지 못하도록 보호하는 것을 의미한다.

여기에는 인증도 포함될 수 있다.

하지만, STARTTLS(SMTP 상위 계층)의 출현과 메시지 제출을 위한 포트 587의 사용으로, Gmail과 같은 이메일 클라이언트는 이메일 전송에 STARTTLS와 포트 587을 사용한다.

Gmail에도 인증이 구현된다.

확장자 => 확장명

server.ehlo( => server.ehlo()를 전송할 때

extension => 용어 통일. 확장? 확장명? 확장자?

마지막으로 server.quit()를 사용하여 SMTP세션을 종료했으며, 세번째 스크린 샷에 표시된 것처럼 closing connection으로 응답한다.

더 알아보기





