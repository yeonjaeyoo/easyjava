9장. 담화 분석 - 아는 것은 믿는 것이다.

담화 분석은 자연 언어 처리의 애플리케이션의 또 다른 하나이다. 담화 분석은 AR(anaphora resolution) 같이 다른 작업을 수행하기에 유용한 문맥 정보를 결정하는 과정으로 정의될 수 있다.(우리는 9장 후반 절에서 이 부분을 다룰 것이다.)

9장에서는 다음 내용을 살펴볼 것이다.

-담화 분석 소개
-센터링 이론을 사용한 담화 분석
-Anaphora resolution(확인)

담화 분석 소개

언어적 측면에서 단어 discourse는 사용 언어를 의미한다. 담화 분석은 텍스트 해석과 사회적 상호 작용을 아는 과정과 관련된 문자 또는 언어 분석을 수행하는 과정으로 정의될 수 있다. 담화 분석은 형태소, n그램, 시제, 언어적 측면, 페이지 레이아웃 등의 처리를 포함할 수 있다. 담화는 문장의 순차 집합으로 정의될 수 있다.

대부분의 경우에, 이전 문장에 기초하여 문장의 의미를 해석할 수 있다.

"John went to the club on Saturday. He met Sam."를 상기한다. 여기서, 그는 존을 언급한다.

Page 184.

DRT(Discourse Representation Theory)는 AR을 실행하는 수단을 제공하기 위해 개발됐다. DRS(Discourse Representation Structure)는 담화 지시 대상 및 조건의 도움으로 담화의 의미를 제공하기 위해 개발됐다. 담화 지시 대상은 담화에서 1차 논리에 사용 된 변수와 관련된 것을 언급한다. 담화 표현 구조 조건은 1차 술어 논리에 사용된 기초 공식(atomic formulas)을 참조한다.

FOPL(First Order Predicate Logic)은 명제 논리의 개념을 확장하기 위해 개발됐다. FOPL은 함수, 인자 및 한정사의 사용을 포함한다. 한정사의 두 가지 유형은 일반 문장, 즉, 보편적인 한정사와 실존적 한정사를 나타내는 데 사용된다. FOPL에서는 연결어, 상수 및 변수도 사용된다. 예를 들면, 로빈은  bird(robin) 같이 FOPL에서 표현될 수 있다.

이제 담화 표현 구조의 예제를 살펴보자.

<표>

Page 185.

위의 다이어그램은 다음과 같은 문장의 표현이다.

1. John went to a club
2. John went to a club. He met Sam

여기서, 담화는 두 문장으로 구성된다. 담화 구조 표현은 전체 텍스트를 나타낼 수 있다. 계산적으로 처리중인 DRS에서, 그것은 선형 포맷으로 변환될 필요가 있다.

2016.10.19

일차 술어 논리의 구현을 제공하기 위해 사용될 수 있는 NLTK 모듈은 nltk.sem.logic이다. UML 다이어그램은 여기에 표시된다.

<그림>

Page 186.

nltk.sem.logic 모듈은 일차 술어 논리의 표현을 정의하는 데 사용된다. UML 다이어그램은 일차 술어 논리뿐만 아니라 메소드의 객체의 표현에 필요한 다양한 클래스로 구성된다. 포함된 메소드는 다음과 같다.

-substitute_bindings(bindings): 여기에서, 바인딩은 variable-to-expression 매핑을 나타낸다. 그것은 특정 값으로 표현에 존재하는 변수를 대체한다.

-Variables(): 대체될 필요가 있는 모든 변수 집합을 포함한다. 그것은 상수뿐만 아니라 자유 변수로 구성된다.

-replace(variable, expression, replace_bound): 이것은 변수 인스턴스에 대한 표현식을 대체하기 위해 사용한다. replace_bound는 바운드 변수 교체 여부를 지정하는 데 사용된다.

-Normalize(): 자동생성된 고유의 변수 이름을 변경하는 데 사용된다.

-Visit(self,function,combinatory,default): 이것은 함수를 호출하는 서브표현식을 방문하는 데 사용된다. 결과는 기본 값으로 시작하는 조합(combinator)에 전달된다. 조합의 결과는 반환된다.

-free(indvar_only): 오브젝트의 모든 자유 변수의 세트를 반환하는 데 사용된다. indvar_only가 True로 설정된다면 개별 변수가 반환된다.

-Simplify(): 오브젝트를 나타내는 표현식을 단순화하기 위해 사용된다.

담화 표현 이론의 기초를 제공하는 NLTK 모듈은 nltk.sem.drt이다. 그것은 nltk.sem.logic의 상단에 위치한다. UML 클래스 다이어그램은 nltk.sem.logic 모듈에서 상속된 클래스를 포함한다. 다음은 이 모듈에 속한 메소드이다.

-get_refs(recursive): 이 메소드는 현재 논의에 대한 지시 대상을 얻는다.
-fol(): 이 메소드는 일차 술어 논리로 DRS의 변환에 사용된다.
-draw(): 이 메소드는 Tkinter graphics 라이브러리의 도움으로 DRS를 그리기 위해 사용된다.

Page 187.

2016.10.20

nltk.sem.drt 모듈의 UML의 클래스 다이어그램을 살펴보자.

<그림>

Page 188.

WordNet 3.0에 액세스를 제공하는 NLTK 모듈은 nltk.corpus.reader.wordnet이다.

예를 들면  선형 형식은 담화 대상물(discourse referents) 및 DRS 조건을 포함한다.

( [x], [John(x), Went(x)] )

DRS의 구현에 사용할 수 있는 NLTK에서 다음 코드를 살펴보자.

<소스>

NLTK의 앞의 코드는 다음과 같은 이미지를 그릴 것이다.

<그림>

여기서, 표현은 fol() 메소드를 사용하여 FOPL로 변환된다.

다른 표현에 대한 NLTK의 다음 코드를 살펴보자.

<소스>

Page 189.

fol() 함수는 표현의 1차 술어 논리 동등물을 구하는데 사용된다. 앞의 코드는 다음 이미지를 표시한다.

<그림>

DRS 연결 연산자(+)를 사용하여 두 개의 DRS의 연결을 수행할 수 있다. 두 개의 DRS 연결을 수행할 수 있는 NLTK의 다음 코드를 살펴보자.

<소스>

앞의 코드는 다음 이미지를 그린다.

<그림>

여기서, simplify()는 표현을 단순화하는 데 사용한다.

Page 190.

또 다른것에 하나의 DRS를 포함하여 사용되는 NLTK의 다음 코드를 살펴보자.

<소스>

두 문장을 결합하는 데 사용될 수 있는 또 다른 예제를 살펴보자. 여기에서, PRO는 사용되고 resolve_anaphora()는 AR을 수행하는 데 사용된다.

<소스>

센터링 이론을 사용한 담화 분석

센터링 이론을 사용하여 담화 분석은 corpus annotation을 향한 첫 번째 단계이다. AR의 타스크도 포함한다. 센터링 이론에서, 분석을 위한 다양한 단위로 담화를 분할하는 작업을 수행한다.

센터링 이론은 다음을 포함한다.

-목적 혹은 담화 참가자와 담화의 의도 간의 상호 작용
-참가자 주의
-담화 구조

센터링은 참가자의 관심과 로컬뿐만 아니라 글로벌 구조 표현과 담론의 일관성에 영향을 미치는 방법과 관련이있다.

Page 191.

2016.10.21

Anaphora resolution

AR은 문장에서 대명사 혹은 명사구가 해결되고 담화 지식의 기초의 특정한 엔티티를 말하는 과정으로 정의될 수 있다.

예를 들면,

존은 사라를 도왔다. 그는 친절했다.(John helped Sara. He was kind.)

여기에서 그는 존이다.

AR은 즉, 세 가지 유형이다.

-Pronominal: 여기서, 지시대상은 대명사가 지칭된다. 예를 들어, 샘은 그의 인생의 사랑을 발견했다. 여기서 '그'는 '샘'을 말한다. 
-Definite noun phrase: 여기서, 선행은 폼의 구문, <the><noun phrase>에 의해 참조될 수 있다. 예를 들어, 관계는 오래 지속되지 않을 수 있다. 여기서의 관계는 이전 문장의 사랑을 의미한다.
-Quantifier/ordinal: 하나(one) 같은 수량과 처음 같은 순서수도 AR의 예제이다. 예를 들어, He began a new one. 여기서, one은 관계를 의미한다.

cataphora에서 지시대상은 선행자 앞에 위치한다.(확인) 예를 들어, After his class, Sam will go home. 여기에서, his는 Sam을 의미한다.

NLTK 아키텍처의 일부 확장을 통합하기 위한, 새로운 모듈은 기존 모듈, nltk.sem.logic 및 nltk.sem.drt의 상단에 개발된다. 새로운 모듈은 nltk.sem.drt 모듈에 대한 대체와 같은 역할이다. 강화된 클래스와 모든 클래스의 대체가 있다.

resolve()라는 메소드는 AbstractDRS()라고 불리는 클래스에서 간접적이고 직접적으로 호출할 수 있다. 그것은 특정 오브젝트의 단호한 복사의 목록을 제공한다. 해결되야 하는 오브젝트는 readings() 메소드를 오버라이드 해야한다. resolve() 메소드는 traverse() 함수를 사용하여 읽기 값을 생성하기 위해 사용된다. traverse() 함수는 조작 목록에 정렬을 수행하기 위해 사용된다. 우선 순위 리스트는 다음을 포함한다.

-결합 작업
-Local accommodation operations
-Intermediate accommodation operations
-Global accommodation operations

Page 192.

2016.10.24

이제 traverse() 함수의 다이어그램을 살펴보자.

<그림>

Page 193.

작업의 우선 순위가 생성된 후, 다음과 같이 일어난다.

-읽기는 deepcopy() 메소드의 도움으로 작업에서 생성된다. 현재 작업은 인자로 발생된다.
-readings() 메소드가 실행되면, 작업 목록이 수행된다.
-작업 목록이 비어 있지 않을 때까지, 실행은 그 작업을 수행한다.
-수행되는 작업 남아 있지 않은 경우, 허용성 검사(admissibility check)는 최종 판독을 실행할 것이다. 검사가 성공한 경우, 그것은 저장될 것이다.

AbstractDRS()에서, resolve() 메소드가 정의된다. 다음과 같이 정의한다.

def resolve(self, verbose=False)

PresuppositionDRS 클래스는 다음과 같은 메소드를 포함한다.

-find_bindings(drs_list, collect_event_data): 바인딩은 is_possible_binding 메소드를 사용한 DRS 인스턴스의 리스트로부터 발견된다. collect_event_data가 True로 설정되어있는 경우 참여 정보의 수집은 완료된다.
-is_possible_binding(cond): 이 조건이 바인딩 후보인지를 인식하고 트리거 조건에 맞는 기능을 갖는 단항 술어인지 확인한다.(확인)
-is_presupposition.cond(cond): 모든 조건 중에서 트리거 조건을 식별하는 데 사용된다.
-presupposition_readings(trail): PresuppositionDRS의 서브 클래스에서 판독과 같다.

Page 194.

AbstractDRS에서 상속된 클래스를 살펴보자.

<그림>

Page 195.

DRTAbstractVariableExpression에서 상속된 클래스를 살펴보자.

<그림>

Page 196.

DrtBooleanExpression에서 상속된 클래스를 살펴보자.

<그림>

DrtApplicationExpression에서 상속된 클래스를 살펴보자.

<그림>

Page 197.

DRS에서 상속된 클래스를 살펴보자.

<그림>

Page 198.

요약

9장에서는 담화 분석, 센터링 이론을 사용하여 담화 분석, anaphora resolution를 살펴봤다. 일차 술어 논리를 사용한 내장된 담화 표현 구조를 다뤘다. NLTK가 UML 다이어그램을 사용한 일차 술어 논리를 구현하는 방법도 살펴봤다.

10장에서는 NLP 도구의 평가를 살펴볼 것이다. 또한 오류 식별, 사전 매칭, 구문 매칭, 얕은 시맨틱 검색에 대한 다양한 메트릭을 다룰 것이다.

Page 199.

10장. NLP 시스템의 평가 - 성능 분석

주어진 NLP 시스템은 원하는 결과의 생성 여부 및 원하는 성능이 달성되는지 여부를 분석할 수 있도록 NLP 시스템의 평가를 수행한다. 평가는 미리 정의된 메트릭을 사용하여 자동으로 수행될 수 있거나, NLP 시스템에 의해 얻어진 출력으로 인간 출력을 비교하여 수동으로 수행될 수 있다.

10장에서는 다음 내용을 살펴볼 것이다.

-NLP 시스템의 평가를 위해 필요
-NLP 도구의 평가(POS 태거, Stemmers 및 형태소 분석기)
-골드 데이터를 사용한 파서 평가
-IR 시스템의 평가
-오류 식별을 위한 메트릭
-어휘 일치 기반 메트릭
-구문 일치 기반 메트릭
-shallow 의미 매칭을 사용한 메트릭

NLP 시스템의 평가를 위해 필요

NLP 시스템에 의해 주어진 출력은 인간의 출력으로부터 예상되는 것과 유사한인지를 분석하기 위하여 NLP 시스템의 평가가 행해진다. 모듈의 오류가 초기 단계에서 식별된 경우, 이 후 NLP 시스템을 수정하는 비용은 상당한 정도로 감소된다.

Page 200.

태거를 평가한다고 가정한다. 인간의 출력과 태거의 출력을 비교하여 이 작업을 수행할 수 있다. 많은 시간, 공정한 혹은 전문가 인간에 액세스할 수 없다. 그래서 태거의 평가를 수행하기 위해 골드 표준 테스트 데이터를 구성할 수 있다. 이것은 수동으로 태그되고 태거의 평가에 사용될 수 있는 표준 코퍼스로 간주되는 코퍼스이다. 태거에 의해 지정된 태그의 형태로 출력이 골드 표준 테스트 데이터를 제공하는 것과 같은 경우 태거는 정확한 것으로 간주된다.

gold standard annotated corpus의 생성은 중요한 작업이며 가격도 매우 비싸다. 수동으로 주어진 테스트 데이터를 태깅하여 수행된다. 이 상황에서 선택된 태그는 다양한 정보를 나타내는 데 사용할 수있는 표준 태그로 간주된다.

2016.10.25

NLP 도구(POS 태거, 스테머, 형태소 분석기)의 평가

POS 태거, 스테머, 형태소 분석기, NER 기반 시스템, 기계 번역기 같은 NLP 시스템의 평가를 수행할 수 있다. 유니그램 태거를 훈련하는 데 사용될 수 있는 NLTK에서 다음 코드를 살펴보자. 문장 태깅을 수행하고 평가는 태거 의해 주어진 출력이 골드 표준 테스트 데이터와 동일한지를 확인하기 위해 수행된다.

<소스>

유니그램 태거의 훈련과 테스트를 별도의 데이터에 대해 수행하는 NLTK에서 다음 코드를 살펴보자. 주어진 데이터는 80%의 트레이닝 데이터와 20% 테스트 데이터로 분할된다.

<소스>

Page 201.

<소스>

N-Gram 태거를 사용하는 방법을 보여주는 NLTK에서 다음 코드를 살펴본다. 여기, Training 코퍼스는 태그된 데이터로 구성된다. 또한, 다음의 예제에서, n-gram 태거의 특별한 케이스인 바이그램 태거를 사용한다.

<소스>

Page 202.

2016.10.26

태깅의 또 다른 방법은 다른 메소드를 부트스트랩에 의해 수행하는 것이다. 이 방식에서, 태깅은 바이그램 Tagger를 사용하여 수행될 수 있다. 태그가 바이그램 Tagger를 사용하여 발견되지 않으면, 유니그램 Tagger와 관련된 back-off 메소드가 사용될 수 있다. 태그는 유니그램 Tagger를 사용하여 발견되지 않을 경우에도, 기본 태거 관련된 back-off 메소드가 사용될 수 있다.

결합 Tagger를 구현하는 NLTK의 다음 코드를 살펴보자.

<소스>

언어학자들은 단어의 범주를 결정하기 위해 다음과 같은 단서를 사용한다.

-형태학적 단서
-통사적 단서
-의미론적 단서

형태적 단서는 접두사, 접미사, 중위, 및 사양 정보는 단어의 범주를 결정하는 데 사용되는 것이다.(확인) 예를 들어, ment는 establish + ment = establishment와 achieve + ment = achievement 같은 명사를 형성하기 위해 동사와 결합하는 접미사이다.

2016.10.27

통사적 단서는 단어의 범주를 결정하는 데 유용할 수 있다. 예를 들어, 명사가 이미 알고 있다고 가정하자. 이제, 형용사가 결정될 수 있다. 형용사는 문장에서, ver 같은 명사 혹은 단어 이후에 발생할 수 있다.

의미 정보는 단어의 분류를 결정하기 위해 사용될 수 있다. 단어의 의미를 알고있는 경우, 그 종류는 쉽게 알 수 있다.

청크 파서의 평가에 사용할 수 있는 NLTK의 다음 코드를 살펴보자.

<소스>

Page 203.

 




