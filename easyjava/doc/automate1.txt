1. 웹 작업

인터넷없는 삶을 상상해본 적이 있을까? 음식 주문에 대한 정보를 교환하는 것부터 거의 모든 것이 오늘날 인터넷에 크게 의존한다. 흥미로운 World Wide Web의 세계를 살펴보고 파이썬(Python) 모듈을 사용하여 상호 작용할 수 있는 다양한 방법을 살펴보자.

1장에서는 다음 내용을 살펴본다.

-HTTP 요청생성
-웹 스크래핑(web scraping)에 대한 간략한 설명
-웹 컨텐츠(web content) 파싱(Parsing) 및 추출(extracting)
-웹 컨텐츠 다운로드
-서드 파티(third-party) REST API 작업
-파이썬의 비동기 HTTP 서버
-셀레늄 바인딩(selenium bindings)을 사용한 웹 자동화
-웹 스크래핑과 리드 생성 자동화

소개

인터넷은 삶을 매우 쉽게 만들어주기 때문에 때로는 그 힘을 깨닫지 못한다. 친구 상태를 확인, 부모님 전화, 중요한 비즈니스 이메일(e-mail)에 응답하거나 게임을 하는 등- 오늘날 거의 모든 일에 대해 WWW(World Wide Web)를 사용한다.

Page 13.

이 레시피를 실행하려면 파이썬 v2.7을 설치해야한다. 일단 설치되면 파이썬 pip를 설치해야한다. PIP는 Pip Installs Packages의 약자로 컴퓨터에 필요한 파이썬 패키지를 다운로드하고 설치하는 데 사용할 수 있는 프로그램이다. 마지막으로 HTTP 요청을 하기 위해 requests 모듈이 필요하다.

requests 모듈을 설치하여 시작할 것이다(운영 체제를 기반으로 머신에서 수행할 수 있도록 파이썬 및 pip 설치를 남겨둘 것이다). 다른 전제 조건은 없다. 이제, 서둘러서 시작하자.

사용 방법

1. Linux/Mac 컴퓨터에서 터미널(Terminal)로 이동하여 다음 커맨드를 실행한다.

pip install -U requests

파이썬 사이트 패키지에 대한 권한이 없는 경우 sudo만 사용해야한다. 그렇지 않으면 sudo가 필요하지않다.(확인)

2. 다음 코드는 파이썬의 requests 모듈에서 HTTP GET 요청을하는 데 도움이 된다.

import requests r =
requests.get('http://ip.jsontest.com/')
print("Response object:", r)
print("Response Text:", r.text)

3. 다음 출력을 확인한다.

<그림>

Page 14.

4. 데이터 페이로드(data payload)로 HTTP GET 요청을 생성하는 것은 요청에서 간단하다. 다음 코드는 이를 달성하는 데 도움이 된다. 전송될 URL 요청을 확인할 수도 있다.

payload = {'q': 'chetan'} r =
requests.get('https://github.com/search', params=payload)
print("Request URL:", r.url)

<그림>

5. 이제 requests 모듈을 사용하여 HTTP POST 호출을 생성해보자. 이는 웹 사이트에 로그인 혹은 가입 양식을 채우고 포스트(POST) 하는 것과 유사하다.

payload = {'key1': 'value1'} r =
requests.post("http://httpbin.org/post", data=payload)
print("Response text:", r.json())

<그림>

Page 15.


