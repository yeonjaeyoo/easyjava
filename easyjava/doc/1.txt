Page 1.

이 책 전반에 걸쳐서, 구/신 자바 기술을 사용하여 많은 네트워크 개념, 아이디어, 패턴, 구현 전략을 배울 수 있습니다.
네트워크 연결은  로우 레벨은 소켓의 사용으로, 더 하이 레벨은 다수 프토토콜의 사용으로 발생한다.
커뮤니케이션은 요청과 응답의 적절한 조절로 동기화 되거나, 다른 활동이 수행되는 곳에서 응답이 전송될 때까지, 비동기 될 수 있다.

Page 2.

이러한 다양한 개념은 각 장에 특정한 주제로 설명했다. 각 장은 앞서 소개한 개념들을 서로 연관시켜 소개한다. 다양한 예제 코드는 주제에 대한 이해를 향상하도록 사용합니다.
서비스 접속의 요점은 주소(address)를 발견하거나 아는 것이다. 주소는  www.packtpub.com이나 IP address(83.166.169.231)의 형태로 사람이 읽을 수 있다.
인터넷 프로토콜(Internet Protocol, IP)은 인터넷 상의 정보를 액세스하기 위해 사용되는 로우 레벨의 주소 체계이다. 자원에 접근하는 주소는 오랫동안 IPv4를 사용하고 있다.

2016.02.17
서비스는 서버에 의해 제공된다. 간단한 예는 에코 서버인데, 에코 서버는 전송된 것을 재전송한다. HTTP 서버와 같은 더 정교한 서버는 다양한 요구를 만족시키기 위해 광범위한 서비스를 지원할 수 있다.
클라이언트/서버 모델과 자바 지원은 3 장(네트워킹 NIO 지원)에서 배운다.
 
다른 서비스 모델은 피어 투 피어(peer-to-peer, P2P) 모델이다. P2P 아키텍쳐는 중앙 서버는 없고, 오히려 서비스를 제공하는 통신 애플리케이션 네트워크가 있다.
P2P 모델은 비트토런트(BitTorrent), 스카이프(Skype), 그리고 BBC의 아이 플레이어(iPlayer)와 같은 응용프로그램에서 볼 수 있다.
이러한 유형의 응용프로그램 개발에 필요한 지원의 대부분은 이 책의 범위를 벗어나지만, 제 4장(클라이언트/서버 개발)에서, P2P 이슈와 함께 자바와 JXTA가 제공하는 지원을 알아보자.

IP는 네트워크를 통해 정보의 패킷을 송수신하기 위해 로우 레벨로 사용된다. 또한 UDP(User Datagram Protocol)와 TCP(Transmission Control Protocol) 통신 프로토콜의 사용을 설명 할 것이다.
UDP, TCP 프로토콜은 IP의 상층부에 위치하고 있다. UDP는 신뢰성 있는 전송에 대한 보장이 없어 짧은 패킷이나 메시지를 브로트케스트(broadcast) 하는데 사용된다.
TCP는 일반적으로 UDP보다 더 높은 서비스 수준을 제공한다. 제 5장(P2P 네트워크)에서 관련 기술의 사용을 배울 것이다.

Page 4.

InetAddress 클래스는 공용(public) 생성자(constructor)가 없다. 인스턴스(instance)를 얻으려면 여러가지 정적 GET 타입 메소드 중 하나를 사용해야 한다.
예를 들면, getByName 메소드는 다음과 같이 주소를 나타내는 스트링(string)을 가져온다. 이 경우 문자열은 URL(Uniform Resource Locator)이다.

InetAddress address = InetAddress.getByName("www.packtpub.com");
System.out.println(address);

[예제 코드 다운로드]
http://www.packtpub.com에서 여려분의 계정에서 구입한 모든 Packt 책의 예제 코드를 다운로드 할 수 있다.
다른 곳에서 책을 구입한 경우 http://www.packtpub.com/support를 방문하여 e-mail를 등록하면 파일을 받을 수 있다.

다음과 같은 결과를 보여준다.

www.packtpub.com/83.166.169.231

이름 끝에 붙어있는 숫자는 IP 주소이다. IP 주소는 인터넷에서 유일하게 개체를 식별한다.주소에 대한 다른 정보가 필요하면, 여기에 예시된 바와 같이, 우리는 여러 가지 메소드들 중 하나를 사용할 수 있다.

System.out.println("CanonicalHostName: " + address.getCanonicalHostName());
System.out.println("HostAddress: " + address.getHostAddress());
System.out.println("HostName: " + address.getHostName());

실행하면 다음과 같은 결과가 나온다.

CanonicalHostName: 83.166.169.231
HostAddress: 83.166.169.231
HostName: www.packtpub.com

이 주소에 접근할 수 있는지 여부를 테스트하려면 아래와 같이 isReachable 메소드를 사용한다. 메소드의 아규먼트(argument)는 주소에 접속할 수 없는지 결정하기 전에 필요한 대기시간을 의미한다.
단위는 밀리세컨드 이다.

address.isReachable(10000);

Page 5.

IPv4 및 IPv6 주소를 지원하는 Inet4Address와 Inet6Address 클래스가 있다. 제 2장(네트워크 주소)에서의 사용법을 설명한다.

일단 주소를 획득한 후, 서버와의 네트워크 액세스를 지원하기 위해 사용할 수 있다. 이러한 맥락에서 사용을 보여주기 전에, 커넥션(connection)에서 데이터를 얻고 처리하는 방법을 살펴보자.

NIO 지원

java.io패키지, java.nio패키지, and java.nio 서버패키지는 자바에서 IO처리의 대부분을 지원한다.
제 3장(네트워크 NIO 지원)에서 네트워크 엑세스를 제공하는 이런 패키지를 확인할 것이다. 여기서는 java.nio패키지의 기본적인 측면에 초점을 맞출 것이다.

NIO 패키지는 사용되는 세 가지 핵심 개념이 있다.

채널(Channel) : 애플리케이션 간의 데이터 흐름을 나타낸다.
버퍼(Buffer) : 데이터를 처리하기 위한 채널과 함께 동작한다.
셀렉터(Selector) : 다중 채널을 처리 하기 위한 싱글 쓰레드 허용하는 기술이다.

채널과 버퍼는 통상적으로 서로 연관되어 있다. 데이터는 버퍼에서 채널 또는 채널에서 버퍼로 전달될 수 있다. 버퍼는 그 이름에서 알 수 있듯이, 정보에 대한 임시 저장소이다.
셀렉터는 어플리케이션 확장성을 지원하는데 유용하며, 제 7장(네트워크 확작성)에서 배울 것이다.

네 가지 주요 채널이 있다.

FileChannel: 파일과 함께 동작한다.
DatagramChannel: UDP 통신을 지원한다.
SocketChannel: TCP 클라이언트와 함께 사용된다.
ServerSocketChannel: TCP 서버와 함께 사용된다.

문자(character), 정수(integer) 및 부동 소수점(float)과 같은 기본 데이터 타입을 지원하는 다양한 버퍼 클래스가 있다.

URLConnection 클래스 사용

서버를 액세스하는 간단한 방법은 URLConnection 클래스를 사용하는 것이다. URLConnection 클래스는 어플리케이션과 URL 인스턴스 간의 연결을 나타낸다.
URL 인스턴스는 인터넷상의 리소스(resource)를 나타낸다.

2016.02.22 

예제 추가할 것

Page 7.

결과의 첫 번째 줄은 다음에 표시된다. 이전과 동일한 결과를 생성하지만, 한 번에 64바이트로 제한된다.

<!doctype html><html itemscope="" itemtype="http://schema.org/We

채널 클래스와 그 파생 클래스는 이전 기술에 의해 제공되는 데이터보다 네트워크에서 발견된 데이터에 액세스 할 수 있는 개선된 기술을 제공한다. 이 클래스 대하여 좀더 알 수 있을 것입니다.

클라이언트/서버 아키텍쳐

자바를 사용하여 서버를 생성하는 여러 가지 방법이 있다. 우리는 몇 가지 간단한 방법을 설명하고 4장(클라이언트/서버 개발)에서 이러한 기술에 대한 자세하게 논의해보자. 클라이언트 및 서버 모두가 생성 될 것이다.

서버는 IP 주소와 함께 시스템에 설치된다. 하나 이상의 서버는 지정된 시간에 컴퓨터에서 실행 할 수 있다. 운영체제는 시스템에 대한 서비스 요청을 수신 할 때, 또한 포트 번호를 받을 것이다.
포트 번호는  전달받는 요청이 있는 곳에서 서버를 식별한다. 이 서버는, 그래서, IP 주소와 포트 번호의 조합에 의해 식별된다.

일반적으로, 클라이언트는 서버에 요청을 발신한다. 서버는 요청을 수신하고 응답을 다시 전송한ㄷ다. 통신을 위해 사용되는 요청/응답 및 프로토콜의 특성은 클라이언트/서버에 의존한다.
때로는 하이퍼 텍스트 전송 프로토콜(HTTP, Hypertext Transfer Protocol)과 같은 문서에 의해 입증된 프로토콜은 사용된다. 간단한 아키텍처를 위해서, 일련의 문자 메시지에서 앞뒤로 전송된다.

Page 8. 

