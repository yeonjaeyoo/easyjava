Page 1.

것이다. 다음과 => 붙일것

프로세스 => 과정

그들은 => X

애플리케이션에 => 애플리케이션에게

8장 이후 절에서 => 다음 절에서는

우리의 => X

내용으로 이동한다. => 내용을 살펴본다.

이 키 => 키

보호되야하는 => 보호하기 위한

프로세스 => 과정

설명하는 => X

원격으로 ~ 파티 => 확인

단순화 => 단순화한

설명할 => X

이 장에서는 => 8장에서는

Page 2.

이것은 => X

프로세스 => 과정

후속 => 연속된

다른 => 그 외

Page 3.

이 후 절에서 => 이 후 절에서는

암호화 메소드 => encrypt 메소드

이 메소드는 => encrypt 메소드는

암호화된 텍스트와 => 암호화를 위한 텍스트와

암호화 프로세스에 대한 => 암호화 과정을 위한

Chpher 인스턴스는 ~ 초기화된다 => X

getEncoder는 => getEncoder 메소드는

Page 4.

암호화 바이트 배열을 => 암호화된 바이트 배열을

다음에 보여주는 => 다음과 같이

암호회된 ~ init 메소드는 => 암호화된 바이트가 디코딩되고 Cipher 클래스의 init 메소드는

절에 => 절에서

사용한다. => 사용할 것이다.

비대칭 암호화 기법 => 비대칭 암호화 방식

의해 열린다. => 사용된다.

어느 키를 이용하여 => 어느 키를 이용하든지

Page 5.

소유자는 => 소유자가

공개 키를 => 공개 키로

개인 키 소유자가 => 개인 키의 소유자가

보낸 것 => 전송한 것

다른 사용자가 => 누군가가

소유자가 => 소유자는

사기꾼이 될 수 있다. => 사기꾼일지도 모른다.

두 당사자가 => 당사자 모두가

공개/개인 키의 ~ 경우 => 자신의 공개 키와 개인 키의 세트를 가진다면

송신자와 수신자가 => 송신자와 수신자는

또한 ~ 있다. => 확인

송신하는 => 전송하는

암호화한다. => 암호화 할 것이다.

이 메시지 M1를 호출할 수 있다. => 이것을 메시지 M1이라고 부른다.

우리에게 ~ 주는 => X

암호화한다. => 암호화한 M2를 준다.

Bob에 => Bob에게

지금 => 이제

M1을 반환한다.=> 이것은 M1을 반환한다.

얻기 위한 => 얻기 위해

복호화하기 위해 => 복호화하는

그는 ~ 알고있다. => 확인

모두 => 모든

이것 => X

이 클래스는 => AsymmetricKeyUtility 클래스는

이러한 => 여기에서 이러한

Page 6.

이용하여 => 사용하여

집합을 => 세트를

사용한다. => 사용할 것이다.

단순화한다. => 단순화할 것이다.

여기에서 => 다음과 같이

Page 7.

메소드에 대하여 설명한다. => 메소드는 다음과 같다.

인스턴스가 => 인스턴스는

한다. => 할 것이다.

암호화된 메시지는 ~ 한다. => doFinal 메소드가 그것을 복호화하기 전에 암호화된 메시지는 전달되기 위해 디코드되야한다.

두 메소드 모두는 => 이러한 모든 메소드는

프로세스 => 과정

잡을 수 있다. => 인식할 수 있다.

파일의 비대칭 키 저장 => 비대칭 키 파일 저장

검색하기위한 => 검색하기 위한

예시한다 => 보여준다.

스펙을 => 명세를

Page 9.

나타냅니다. => 나타낸다.

Page 10.

유입 => 타입

키스토어의 다섯 가지 타입 => 다섯 가지 키스토어의 타입

2016.07.20

명령 프롬프트에서 윈도우의  => 윈도우의 명령 프로프트에서

포함된 => 포함하는

명령을 => 커맨드를

명령을 => 커맨드를

시작한다. => 시작할 것이다.

2016.07.21

Page 19.

살펴보자. => 살펴본다.

Page 20.

진행중인 => 작동하는

같은 => 동일한

암호문 => 암호화된 텍스트

보다 => 외에

우선 서버 출력을 표시한다.

기술에서 => 방법에서

클라이언트는 => 클라이언트가

Page 21.

설정되고 => 생성되고

이것은 => X

읽는다. => 읽을 것이다.

개인 키라고 부른다. => 개인 키로 호출된다.

다시 클라이언트로 전송된다. => 클라이언트로 재전송 된다.

Page 22.

확립된다. => 생성된다.

사용자가 메시지를 => 사용자 메시지를

얻어진다. => 얻는다.

Page 23.

핻동 => 작동하는

일련의 => X

추가 => 다음은 클라이언트 상호작용을 보여준다.

다양한 => 많은

프로토콜들의 집합이다. => 프로토콜이다.

그러나, => 그러나

TLS ~ 사용한다. => TLS와 SSL 위치이동


