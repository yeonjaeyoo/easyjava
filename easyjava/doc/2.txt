Page 29.

IP 프로토콜은 표준화된 문서가 있다.

RFC 790-지정번호: 이 규격은 네트워크 번호의 형식을 다룬다. 예를 들면, IPv4의 A, B, C 클래스는 본 명세서에서 정의된다(https://tools.ietf.org/html/rfc790).
RFC 1918-개인 인터넷에 대한 주소 할당: 이 규격은 개인 주소가 할당되는 방법과 연관이 있다. 여러 개인 주소가 하나의 공용 주소와 연관될 수 있다(https://tools.ietf.org/html/rfc1918).
RFC 2365—행정상 IP 멀티캐스트 범위: 이 사양은 멀티캐스트 주소 공간을 정의하고 어떻게 구현되는지 알 수 있다. IPv4 및 IPv6 멀티캐스트 주소 공간 간의 매핑이 정의된다(https://tools.ietf.org/html/rfc2365).
RFC 2373—IPv6의 주소 체계: 이 규격은 IPv6 프로토콜, 그 형식 및 IPv6에서 지원하는 다양한 어드레스 유형을 확인한다(http://www.ietf.org/rfc/rfc2373.txt).

여기에서 살펴본 많은 개념은 가능한 자바 코드의 예제로 설명할 것이다. 네트워크에 대한 이해를 시작하자.

네트워크 기본의 이해

네트워크는 네트워크 아키텍처를 생성하기 위한 결합 노드와 링크로 구성된다. 인터넷에 연결된 디바이스는 노드라고 부른다. 컴퓨터 노드는 호스트라고 한다. 노드 간의 통신은 HTTP 혹은 UDP와 같은 프로토콜을 이용한 링크를 따라 수행된다.

링크는 동축 케이블, 트위스트 페어, 그리고 광케이블 같은 유선이거나 전자레인지, 휴대전화, Wi-Fi 인터넷 혹은 위성 통신같이 유선으로 할 수 있다.이러한 다양한 링크는 특별한 통신 요구 사항을 해결하기 위해 다른 대역폭 및 처리량을 지원한다.

노드는 NIC(Network Interface Controller), 브리지, 스위치, 허브, 라우터 같은 디바이스를 포함한다. 그들은 컴퓨터 간에 다양한 형태의 데이터 전송에 모두 연관된다.

IP 주소를 가진 NIC는 컴퓨터의 일부이다. 브리지(Bridge)는 작은 것에서 고장나게된 거대한 네트워크를 허용하는 두 개의 네트워크 세그먼트가 연결된다.(?) 리피터(Repeater)와 허브(Hub)는 강도를 증폭하는 신호를 주로 재전송하기 위해  사용된다.

Page 30.

허브, 스위치, 라우터는 서로 유사하지만 복잡성은 다르다. 허브는 여러 개의 포트를 다루고 모든 접속된 포트로 간단하게 데이터를 전송한다. 스위치는 트래픽 기반의 데이터를 보낼 위치를 배울 것이다. 라우터는 메시지를 처리하고 라우팅하도록 프로그램 될 수 있다. 라우터는 많은 네트워크에서 유용하며, 대부분의 홈 네트워크는 라우터를 사용한다.

메시지는 가정용 컴퓨터에서 인터넷을 통해 보내졌을 때, 몇가지 일들이 일어나고 있다. 컴퓨터의 주소는 세계적으로 유일하지 않다. 인터넷을 사용할 수 있는 주소를 변경하는 NAT(Network Address Translation) 디바이스에 의해 다루는 컴퓨터로부터 전송된 메시지는 요구한다. 하나의 IP 주소는 홈 LAN 같이, 네트워크의 여러 디바이스에서 이용될 수 있다.

컴퓨터는 다른 네트워크에서 게이트웨이 역할을 하는 프록시 서버를 사용할 수 있다. 자바는 Proxy 클래스와 ProxySelector 클래스를 사용하여 프록시에 대한 지원을 제공한다. 우리는  9장, '네트워크 상호 운용'에서 살펴볼 것이다.

메시지는 주로 방화벽을 통해 연결된다. 방화벽은 악의적인 의도로부터 컴퓨터를 보호한다.

네트워크 아키텍처와 프로토콜

2016.03.23 

일반적인 네트워크 아키텍처는 버스(bus), 스타(star), 트리(tree) 타입의 네트워크가 있다. 이러한 물리적인 네트워크들은 가상 네트워크인 오버레이 네트워크를 지원하기 위해 사용된다. p2p 애플리케이션과 같은 이러한 네트워크는 애플리케이션을 지원하는 네트워크 아키텍처를 생성하기 위해 근본적인 네트워크를 추상화한다.

두 개의 컴퓨터가 통신할 때, 프로토콜을 사용한다. 네트워크의 여러 계층에서 사용되는 다양한 프로토콜이 있다. 주로 HTTP, TCP, UDP 및 IP를 살펴볼 것이다.

네트워크가 다양한 작업 및 프로토콜을 지원하기 위해 위치하는 방법을 묘사한 여러 모델이 있다. 하나의 일반적인 모델은 7개의 계층으로 구성된 OSI(Open Systems Interconnection) 모델이다. 네트워크 모델의 각 계층은 하나 이상의 프로토콜을 지원할 수 있다. 여러 프로토콜의 관계는 다음 표에 나타낸다.

하이 레벨 프로토콜을 지원하는 특정화된 작업
애플리케이션 레이어를 위한 데이터 전달 및 처리지원
세션관리
데이터 패킷관리
패킷 전송
네트워크 세그먼트 간 데이터 전송
로우 데이터 처리

Page 31.

OSI 레이어를 위한 더 많은 프로토콜 목록은 https://en.wikipedia.org/wiki/List_of_network_protocols_(OSI_model)에서 찾을 수 있다. 우리는 이러한 모든 프로토콜을 알 수 없고, 자바 SDK에서 지원하는 더 중요한 것들에 살펴볼 것이다.

2016.03.24

서버에서 클라이언트로 웹 페이지의 전송을 생각해라. 그것이 클라이언트에게 전송되고, 자주 각 헤더와 풋터를 포함하는 데이터는 TCP, IP, 링크 레벨 프로토콜 메시지에서 더 캡슐화된 HTTP 메시지에서 캡슐화된다. 이 캡슐화된 헤더 세트는 원래 HTML 파일이 표시될 때까지 데이터가 각 캡슐화된 헤더를 위해 추출된 곳에서 목적지 클라이언트에게 인터넷으로 전송된다.

다행히도, 이 과정의 세부 내용에 익숙할 필요가 없다. 클래스의 대부분은 데이터에 집중할 수 있도록 발생하는 방법을 숨긴다.

트랜스포트 레이어(transport layer)의 관심있는 프로토콜은 TCP 및 UDP이다. TCP는 UDP보다 신뢰할 수 있는 통신 프로토콜을 보장한다. 그러나 UDP는 전송이 강력한 필요가 없는 짧은 메시지에 더 적합하다. 스트리밍 데이터는 흔히 UDP를 사용한다.

UDP와 TCP의 차이점은 다음 표에 설명된다.

연결 : 연결형 / 비연결형
신뢰성 : 높음 / 낮음
패킷의 순서 : 순서보장 / 순서 잠재적 손실
데이터의 경계 : 패킷 병합 / 패킷 분리
전송 시간 : UDP보다 느림 / TCP보다 빠름
오류 검사 : 예 / 예, 그러나 복구 옵션 없음
통지 : 예 / 아니오
무게 : 더 많은 지원을 필요한 무거운 무게 / 지원이 덜한 경량 무게

Page 32.

TCP는 HTTP, SMTP(Simple Mail Transfer Protocol), FTP(File Transfer Protocol)와 같은 다양한 프로토콜에서 사용된다. UDP는 영화와 같은 미디어를 스트리밍하기 위한 DNS와 VOIP(Voice Over IP)에서 사용된다.

NetworkInterface 클래스 사용

NetworkInterface 클래스는 네트워크에서 노드로 작동하는 디바이스에 접속하는 수단을 제공한다. 이 클래스는 또한 로우 레벨 디바이스 주소를 얻을 수 있는 수단을 제공한다. 많은 시스템은 동시에 다중 네트워크에 접속된다. 이들은 네트워크 카드 같은 유선이거나 무선 LAN 혹은 블루투스 연결을 위한 무선일지도 모른다.

NetworkInterface 클래스는 IP 주소를 나타내고, 이 IP 주소에 대한 정보를 제공한다. 네트워크 인터페이스는 컴퓨터와 네트워크 간의 접속점이다. 이것은 주로 어떤 종류의 NIC를 사용한다. 그것은 물리적 표시을 가질 필요는 없지만, 루프백 접속 완료로서 소프트웨어로 수행 될 수 있다(IPv4는 127.0.0.1, IPv6는 ::1).

NetworkInterface 클래스는 public 생성자가 없다. 3개 정적 메서드는 NetworkInterface 클래스의 인스턴스를 반환하기 위해 제공된다.

-getByInetAddress: IP 주소를 안다면 사용된다.
-getByName: 인터페이스 이름을 단다면 사용된다.
-getNetworkInterfaces: 사용 가능한 인터페이스 목록를 제공한다.

다음 코드는 현재 컴퓨터의 네트워크 인터페이스 목록을 획득하고 표시하는 getNetworkInterfaces 메소드의 사용 방법을 보여준다.

예제

Page 33.

한 가지 가능한 출력은 다음과 같지만, 뒷부분은 생략한다.

...

다음에 보여진것과 같이 어떤것이 존재하는 경우, getSubInterfaces 메소드는 서브인터페이스 목록을 반환할 것이다. 하나의 물리적 네트워크 인터페이스가 라우팅 목적을 위한 논리적 인터페이스로 분할될 때 서브인터페이스가 발생한다.

Enumeration<NetworkInterface> interfaceEnumeration =         element.getSubInterfaces();

각 네트워크 인터페이스는 하나 이상의 연관된 IP 주소를 가질 것이다. getInetAddresses 메소드는 이 주소의 Enumeration을 반환한다. 다음에 보여주는 것과 같이, 네트워크 인터페이스 초기 목록은 연관된 IP 주소의 표시를 위해 증강되었다.

소스

Page 34.

다음은 가능한한 결과다.

...

우리는 또한 다음과 같은 자바 8 기술을 사용할 수 있다. 스트림과 람다식은 동일한 결과를 보여주는 IP 주소를 표시하기 위해 사용된다.

소스

네트워크 연결에 대한 상세한 것을 보여주는 위한 다양한 InetworkAddress 메소드 있다. 우리는 이러한 문제가 발생하여 그들은 논의될 것이다.

Page 35.

Mac 주소 획득

2016.03.28 

MAC(Media Access Control) 주소는 NIC를 식별하는 데 사용된다. MAC 주소는 보통 NIC의 제조자에 의해 할당되고 하드웨어의 일부이다. 노드의 각 NIC는 고유한 MAC 주소가 있어야한다. 이론적으로, 장소에 관계없이 모든 NIC는 고유한 MAC 주소가 부여될 것이다. MAC 주소는 일반적으로 16 진수의 6개의 쌍으로 구성된 그룹에 48 비트로 구성된다. 이 그룹은 대시(/) 혹은 콜론(;) 중 하나에 의해 구분된다.

특정한 Mac 주소 획득

일반적으로, 보통 자바 프로그래머는 MAC 주소가 필요하지 않다. 그러나 필요할 때마다 찾을 수 있다. 다음 메소드는 IP 주소 및 NetworkInterface 인스턴스에 대한 MAC 주소를 포함하는 문자열을 반환한다. getHardwareAddress 메소드는 숫자로 구성된 바이트 배열을 반환한다. 이 배열은 MAC 주소로 표시된다. 이 코드 세그먼트 로직의 대부분은 tertiary operator가 대시를 표시여부를 결정하는 출력을 포맷에 전념한다.

소스

다음 예제는 로컬호스트를 사용하여 메소드를 설명한다.

소스

Page 36.

출력은 사용하는 컴퓨터에 따라 달라질 수 있다. 다음은 하나의 가능한 출력이다.

IP address: 192.168.1.5
MAC address: EC-0E-C4-37-BB-

<<박스시작>>
getHardwareAddress 메소드는 로컬호스트 MAC 주소에 접속할 수 있다. 원격 MAC 주소에 접속하는 데는 사용할 수 없다.
<<박스끝>>

다중 MAC 주소 획득

모든 네트워크 인터페이스는 MAC 주소를 가진다. 여기에서 보여주는데로, getNetworkInterfaces 메소드를 사용하여 생성되는 열거형(enumeration)은 각각 네트워크 인터페이스으로 표시된다.

소스

다음은 하나의 가능한 출력이다. 결과는 책 지면상 일부분만 보여준다.

Name    MAC Address
lo      ---
eth0    ---
eth1    8C-DC-D4-86-B1-05
wlan0   EC-0E-C4-37-BB-72
wlan1   EC-0E-C4-37-BB-72
net0    ---
net1    00-00-00-00-00-00-00-E0
net2    00-00-00-00-00-00-00-E0
...

Page 37.

대안으로, 우리는 다음과 같은 자바 구현을 사용할 수 있다. 그것은 스트림에서 열거형으로 변환 한 후 스트림의 각 요소를 처리한다.

소스

스트림의 힘은 특정 인터페이스를 필터링하거나 인터페이스를 다른 데이터 타입으로 변환하는 같은 추가 처리를 수행해야하는 경우에 발생한다.

네트워크 주소 개념

여러 유형의 네트워크 주소가 있다. 주소는 네트워크의 노드를 식별하는 역할을 한다. 예를 들면, IPX(Internetwork Packet Exchange) 프로토콜은 네트워크에서 노드에 접속하는 데 사용된 초기 프로토콜이다. X.25는 WAN(Wide Area Network) 패킷 스위칭에 적합한 프로토콜이다. MAC 주소는 물리적 네트워크 레벨에서 네트워크 인터페이스에 대한 고유 식별자를 제공한다. 그러나  주 관심 분야는 IP 주소입니다.

URL/URI/URN

이 용어들은 인터넷 리소스의 이름과 위치를 참조하는 데 사용된다. URI는 웹 사이트 혹은 인터넷상의 파일과 같은 리소스의 이름을 식별한다. 리소스의 이름과 위치를 포함 할 수도 있다.

2016.03.29

URL은 리소스가 위치하고 있는 장소와 어떻게 검색하는지 구별한다. 프로토콜은 URL의 첫 번째 부분을 구성하고, 데이터를 검색하는 방법을 지정한다. URL은 HTTP 혹은 FTP와 같은 프로토콜을 항상 포함한다. 예를 들면, 다음 두 URL은 서로 다른 프로토콜을 사용한다. 첫 번째는 HTTPS 프로토콜을 사용하며, 두 번째는 FTP 프로토콜을 사용한다.

https://www.packtpub.com/

ftp://speedtest.tele2.net/

자바는 URI와 URL을 지원하는 클래스를 제공한다. 이러한 클래스의 논의는 다음 절에서 시작된다. 여기에서, URN에 대하여 더 상세하게 살펴볼 것이다.

Page 38.

URN은 위치가 아닌 리소스를 식별한다.URL은 도시의 위도와 경도와 유사한 반면에, URN은 도시의 이름과 같다. 웹 페이지, 혹은 파일과 같은 리소스가 이동되는 경우, 리소스에 대한 URL은 더 이상 정확하지 않다. URL은 사용할 때마다  업데이트가 필요할 것이다. URN은 위치가 아니라 리소스의 이름를 구별한다. 여러 엔티티가 URN와 함께 제공되는 경우, 그 위치를 반환한다. URN은 광범위하게 사용하지 않는다.

URN 구문은 다음에 표시된다. <NID> 요소는 네임스페이스 식별자이고, <NSS>는 네임스페이스의 특정한 스트링이다.

<URN> ::= "urn:" <NID> ":" <NSS>

예를 들면, 다음은 네임스페이스를 한정하는 SOAP 메시지의 일부로서 특정한 URN이다.

<?xml version='1.0'?>
<SOAP:Envelope
   xmlns:SOAP='urn:schemas-xmlsoap-org:soap.v1'>
  <SOAP:Body>
   ...
     xmlns:i='urn:gargantuan-com:IShop'>
    ...
  </SOAP:Body>
</SOAP:Envelope>

URN은 ISBN을 사용하여 책을 식별하는 등, 여러 곳에서 사용된다. 브라우저에서 다음 URL을 입력하면 EJB 책에 대한 참조를 가져올 것이다.

https://books.google.com/books?isbn=9781849682381

Page 39.

URN의 구문은 네임스페이스에 따라 달라진다. IANA는 URN 네임스페이스를 포함한 많은 인터넷 리소스의 할당을 담당한다. URN은 여전히 활동적인 연구 분야이다. URL과 URN은 모두 URI에 있다.

URI 클래스 사용

URI의 일반 구문은 scheme과 scheme-speciﬁic-part로 구성되어 있다.

URI로 사용되는 여러 방식이 있다.

-file: 파일 시스템에 사용된다.
-FTP: 파일 전송 프로토콜이다.
-HTTP: 일반적으로 웹사이트에서 사용된다.
-mailto: 메일 서비스의 일부로 사용된다.
-urn: 이름을 사용하여 리소스를 식별하기 위해 사용된다.

scheme-specific-part은 사용되는 방식에 따라 다르다. URI는 절대 또는 상대, 혹은 불투명 또는 계층으로 분류 될 수있다. Java는 URI가 이러한 범주 중 하나에 해당 여부를 확인하는 메소드를 제공하지만 이러한 구별은 여기 우리에게는 즉각적인 관심이 없습니다.

2016.03.30 

URI 인스터스 생성

URI는 다양한 생성자 변화를 이용하여 다른 방식에 대해 생성할 수 있다. 여기에 도시된 바와 같이, URI를 생성하는 가장 간단한 방법은 URI를 지정하는 스트링 인자를 사용하는 것이다.

 URI uri = new
          URI("https://www.packtpub.com/books/content/support");

다음 URI는 URL의 표준화를 다루는 위키페디아(Wikipedia) 기사 하위 섹션에 접속할 조각을 사용한다.

uri = new URI("https://en.wikipedia.org/wiki/"
         + "URL_normalization#Normalization_process")
         
우리는 또한 URI의 스키마, 호스트, 경로 및 조각을 지정하는 생성자의 다음 버전을 사용할 수 있다.

uri = new
         URI("https","en.wikipedia.org","/wiki/URL_normalization",
         "Normalization_process");

이 후자의 두 URI는 동일하다.

Page 40.

URI를 따로 분리

자바는 URI를 대표하는 URI 클래스를 사용하고, URI의 일부를 추출하는 여러 가지 메소드가 있다.

더 많은 유용한 메소드는 다음 표에 나타낸다.

getAuthority : URI를 분해할 역할을 하는 엔티티다.
getScheme : 사용되는 스키마
getSchemeSpecificPart : URI의 특정 부분 스키마
getHost: 호스트
getPath : URI 패스
getQuery : 쿼리(존재하는 경우)
getFragment : 사용된다면, 하위요소가 접근되는
getUserInfo : 가능한 사용자 정보
normalize : 패스에 있는 불필요한 "." 과 ".." 삭제

각각, 경로 또는 조각의 버전을 반환하는 getRawPath 혹은 getRawFragment 같은 여러 "원시(raw)" 메소드도 있다. 별표(*)로 시작하는 물음표 혹은 캐릭터(character) 시퀀스(sequence) 같은 특별한 캐릭터를 포함한다. http://docs.oracle.com/javase/8/docs/api/java/net/URI.html에 설명된 것처럼, 이러한 문자 사용을 정의하는 몇 가지 문자 카테고리가 있다.

URI 특성을 표시하는 데 사용되는 다음의 helper 메소드를 개발했다.

소스

Page 41.

다음 코드 시퀀스는 Packtpub 웹사이트에 대한 URI 인스턴스를 생성하고 displayURI 메소드를 호출한다.

소스

이 순서의 따른 출력은 다음과 같다.

getAuthority: www.packtpub.com
getScheme: https
getSchemeSpeciﬁ cﬁ cPart: //www.packtpub.com/books/content/support
getHost: www.packtpub.com
getPath: /books/content/support
getQuery: null
getFragment: null
getUserInfo: null
normalize: https://www.packtpub.com/books/content/support
http://www.packtpub.com

더 자주, 이러한 메소드는 추가 처리를 위한 관련 정보를 추출하는 데 사용된다.

URL 클래스 사용

사이트에 접속하여 데이터를 검색하기위한 가장 쉬운 방법은 URL 클래스를 사용하는 것이다. 당신이 제공해야 하는 모든 사이트 및 프로토콜의 세부 사항에 대한 URL이다. InetAddress 클래스의 인스턴스는 주소에 대한 IP 주소와 가능한 호스트네임(hostname)을 유지한다.

URLConnection 클래스는 1장, 네트워크 프로그래밍 시작하기에서 소개되었다. 또한 URL에 의해 표시되는 인터넷 리소스에 대한 접속을 제공하는 데 사용될 수 있다. 이 클래스와 사용은 4장, '클라이언트/서버 개발'에서의 살펴볼 것이다.

Page 42.

URL 인스턴스 생성

URL 인스턴스를 생성하는 몇 가지 방법이있다. 가장 쉬운 방법은 단순히 클래스 생성자의 인자로 사이트의 URL을 제공하는 것이다. Packtpub 웹사이트의 생성된 URL 인스턴스가 생성한 곳은 여기에서 설명된다.

URL url = new URL("http://www.packtpub.com");

URL은 특정화 될 수 있는 프로토콜이 필요하다. 예를 들면, URL을 생성하기 위한 다음 시도는 java.net.MalformedURLException: no protocol:www.packtpub.com 오류 메시지가 발생한다.

url = new URL("www.packtpub.com"); 

여러가지 생성자 변화가 있다. 다음 두 가지 변화는 동일한 URL을 생성할 것이다. 두번째는 프로토콜, 호스트, 포트 번호 및 파일에 대한 매개변수를 사용한다.

  url = new URL("http://pluto.jhuapl.edu/");
  url = new URL("http", "pluto.jhuapl.edu", 80,
      "News-Center/index.php");

URL을 따로 분리

URL에 대한 자세한 내용을 아는 것은 유용할 수 있다. 사용자가 우리가 처리해야 할 것을 입력한 경우 사용하고 있는 URL은 심지어 알 수 없다. 다음 표에 요약된 바와 같이, 그 구성 요소로 분할하는 URL을 지원하는 몇 가지 메소드가 있다.

getProtocol : 프로토콜의 이름이다.
getHost : 호스트 이름이다.
getPort : 포트 번호이다.
getDefaultPort : 프로토콜의 기본 포트 번호이다.
getFile : getQuery의 결과와 연결된 getPath의 결과를 반환한다.
getPath : 임의의 경우, URL에 대한 경로를 검색한다.
getRef : URL의 참조 이름을 반환한다.
getQuery : 존재한다면 URL 쿼리의 부분을 반환한다.
getUserInfo : URL과 관련된 사용자 정보를 반환한다.
getAuthority : 권한은 일반적으로 서버의 호스트 네임 혹은 IP 주소로 구성되어 있다. 포트 번호를 포함 할 수 있다.

Page 43.      

2016.03.31

위의 표의 메소드를 설명하기 위해 다음과 같은 메소드를 사용한다.

소스

다음 출력은 여러 URL이 메소드에 대한 인수로 사용되는 출력을 보여준다.

출력

Page 45.

URL 클래스은 IO 스트림과 오픈 커넥션을 지원한다. 1장, '네트워크 프로그래밍 시작'에서 openConnection 메소드를 예제를 살펴봤다. getContent 메소드는 URL에서 참조하는 데이터를 반환한다. 예를 들면, getContent 메소드는 URL에서 참조하는 데이터를 반환한다.

url = new URL("http://www.packtpub.com");
     System.out.println("getContent: " + url.getContent();
     
다음과 같이 출력된다.

sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@5c647e05

이것은 리소스를 처리하는 입력 스트림을 사용할 필요가 있음을 시사한다. 데이터의 타입은 URL과 연관있다. 이 주제는 4 장, '클라이언트/서버 개발'에서 설명하는 URLConnection 클래스를 탐구한다.

IP 주소와 InetAddress 클래스

IP 주소는 컴퓨터, 프린터, 스캐너, 또는 유사한 디바이스와 같은 노드를 식별하는데 사용되는 수치이다. 이는 네트워크 인터페이스 주소와 위치 주소를 위해 사용된다. 컨텍스트(context)에서 고유한 주소는 디바이스를 식별한다. 동일한 시간에 네트워크에서 위치를 구성한다. 이름은 www.packtpub.com 같은 엔티티를 지정한다. 위치한 곳의 주소인, 83.166.169.231를 알려준다. 사이트에서 메시지를 보내거나 받을려면, 메시지는 비정상적으로 하나 이상의 노드를 통해 라우팅된다.     
       
2016.04.04

주소 정보 획득

InetAddress 클래스는 IP 주소를 나타낸다. IP 프로토콜은 UDP 및 TCP 프로토콜에서 사용하는 로우 레벨 프로토콜이다. IP 주소는 32 비트 혹은 디바이스에 할당된 28 비트의 부호없는 숫자 중 하나이다.

IP 주소는 오랜 역사를 가진 두 개의 주요 버전인 IPv4와 IPv6가 있다. 번호 5는 ISP(Internet Stream Protocol)에 할당했다. 이것은 실험용 프로토콜이었으나, 실제로  일반적인 사용을 위해 IPv5는 언급되지 않았다.

InetAddress 클래스의 getByName 메소드는 URL에 대한 IP 주소를 반환할 것이다. 다음 예제에서, www.google.com과 관련된 주소가 표시된다.

소스

Page 46.

다음과 같이 하나의 가능한 출력된다. 많은 웹사이트는 자신에게 할당된 여러 개의 IP 주소를 가지고 있기 때문에 출력은 위치와 시간에 따라 달라질 수 있다. 이 경우에는, IPv4와 IPv6 주소를 모두 사용한다.

www.google.com/74.125.21.105
www.google.com/74.125.21.103
www.google.com/74.125.21.147
www.google.com/74.125.21.104
www.google.com/74.125.21.99
www.google.com/74.125.21.106
www.google.com/2607:f8b0:4002:c06:0:0:0:69

InetAddress 클래스는 IP 주소에 대한 접속을 위해 여러 가지 메소드를 갖는다.이 메소드와 연관되어 살펴볼 것이다. 우리는 그것의 정규 호스트 이름, 호스트 이름, 호스트 주소를 반환하는 메소드로 시작할 것이다. 다음 helper 메소드에서 사용된다.

소스

정식 호스트 이름은 FQDN(Fully Qualiﬁed Domain Name)이다. 용어에서 알 수 있듯이, 최상위 도메인을 포함하는 호스트 전체 이름이다.이러한 메소드에 의해 반환되는 값은 DNS 서버를 포함한 여러 요인에 따라 달라진다. 시스템은 네트워크 엔티티에 관한 정보를 제공한다.

다음 순서는 Packtpub 웹사이트를 나타내는 메소드를 사용한다.

소스

Page 47.

다음 하나와 유사한 출력을 확인할 것이다.

www.packtpub.com/83.166.169.231
CanonicalHostName: 83.166.169.231
HostAddress: 83.166.169.231
HostName: www.packtpub.com

InetAddress 클래스의 toString 메소드는 슬래시(/) 다음의 호스트 주소에 따른 호스트 이름을 반환한다. 이 경우 getCanonicalHostName 메소드는 FQDN가 아닌 호스트 주소를 반환한다. 이 메소드는 이름을 반환하기 위해 최선을 다할 것이지만 머신의 환경설정에 따라 불가능 할 수도 있다.

주소 범위 지정

IP 주소의 스코프(scope)는 IP 주소의 유일성을 말한다. 많은 가정과 사무실에서 사용되는 것과 같은 로컬 네트워크 내에서, 주소는 해당 네트워크에서 로컬 일 수도 있다. 범위의 세 가지 타입이 있다.

Link-local: 인터넷에 접속되어 있지 않은 하나의 로컬 서브넷 내에서 사용된다. 존재하는 라우터는 없다. 링크 로컬 주소의 할당은 컴퓨터가 정적 IP 주소가 없고 DHCP 서버를 찾을 수없는 경우에 자동으로 행해진다.

Site-local: 주소가 글로벌 프리픽스(prefix)를 요청하지 않을 때 사용되고 사이트 내에서 고유하다. 인터넷에 직접 도달할 수 없고, NAT로 맵핑 서비스를 요청할 수도 없다.

Global: 이름에서 알 수 있듯이, 주소는 인터넷에서 고유하다.

IPv6에서 개인 주소와 IPv4에서 개인 주소에 논의되는 개인 주소도 있다. InetAddress 클래스는 사용되는 주소의 형태 식별하는 여러 가지 메소드를 지원한다. 멀티캐스트의 약자인 MC가 존재하는 다음의 테이블에서는 이러한 대부분의 메소드는 따로 설명이 필요없다.

isAnyLocalAddress / any / 로컬 주소와 일치하는 주소이다.와일드카드 주소이다.
isLoopbackAddress / Loopback / 루프백 주소이다. IPv4는 127.0.0.1, IPv6은 0:0:0:0:0:0:0:1이다.
isLinkLocalAddress / Link-local / 링크 로컬 주소이다.

2016.04.05

Page 48.

isSiteLocalAddress / Site-local / 사이트에 대해 로컬이다. 서로 다른 네트워크에 있는 다른 노드들에 의해 같은 사이트 내에서만 도달할 수 있다.
isMulticastAddress / MC / 멀티캐스트 주소이다.
isMCLinkLocal / MC link-local / 링크 로컬 멀티캐스트 주소이다.
isMCNodeLocal / MC node local / 노드 로컬 멀티캐스트 주소이다.
isMCSiteLocal / MC site-local / 사이트 로컬 멀티캐스트 주소이다.
isMCOrgLocal / MC org local / 조직 로컬 멀티캐스트 주소이다.
isMCGlobal / MC global / 글로벌 멀티캐스트 주소이다.

사용되는 주소 타입과 범위는 IPv4 및 IPv6에 대한 다음 표에 요약되었다.

<표 삽입>

테스트 도달 가능성

InetAddress 클래스의 isReachable 메소드는 주소를 찾을 수 있는지 여부를 시도할 것이다. 주소를 찾을 수 있다면, 메소드는 true를 반환한다. 다음의 예제는 이 메소드를 보여준다. getAllByName 메소드는 URL에서 가능한 InetAddress 인스턴스의 배열(array)를 반환한다. isReachable 메소드는 주소에 도달할 수 없는 것을 결정하기 전에 밀리초 단위로 대기할 시간을 지정하는 정수(integer) 인수를 사용한다.   

소스

Page 49.

여기에 보이는 것과 같이 URL인 www.packtpub.com은 도달했다.

www.packtpub.com/83.166.169.231 is reachable

그러나 www.google.com은 도달하지 못했다.

www.google.com/173.194.121.52 is not reachable

www.google.com/173.194.121.51 is not reachable

www.google.com/2607:f8b0:4004:809:0:0:0:1014 is not reachable

결과는 다를 수 있다. isReachable 메소드는 주소에 도달할 수 있는지 여부를 결정하기 위해 최선을 다할 것이다. 그러나 성공은 단순히 주소존재여부보다 다른 여인에 따라 더 달라진다. 실패의 원인은 포함할 수 있다. 네트워크 응답 시간이 너무 길거나 혹은 방화벽에서 사이트를 차단하여 서버가 다운될 수도 있다. 운영 체제와 JVM 셋팅도 얼마나 메소드가 잘 동작하는지에 영향을 미칠 수 있다.

이 메소드의 대안은 URL 대항하여 핑(ping) 커맨드를 실행하는 RunTime class의 exec 메소드를 사용하는 것이다. 그러나 이것은 휴대성이 용이하지 않고 여전히 isReachable 메소드의 성공에 영향을 미치는 몇 가지 요인으로 어려움이 예상될 수 있다.

Inet4Address 소개

이 주소는 4,294,967,296(232) 주소까지 허용되고, 32 비트로 구성되어 있다. 주소의 사람이 읽을 수 있는 형태는 각각 0 ~ 255 범위의 네 개의 십진수(8 비트)로 구성된다. 주소 중 일부는 개인 네트워크와 멀티캐스트 주소를 위해 예약되었다.

Page 50.

초기에 IPv4의 사용에서는, 첫번째 옥텟(octet)(8 비트 단위)는 네트워크의 수(또한 네트워크 프리픽스 또는 네트워크 블록이라고 함)를 나타내고, 나머지 비트는 나머지 필드(호스트 식별자)라고 표현한다. 후에, 세 가지 클래스는 주소를 분할하기 위해 사용되었다.(A, B, C) 이 시스템은 폐기 되었고, CIDR(Classless Inter-Domain Routing)로 대체되었다. 이 라우팅은 더 많은 유연성을 제공을 위한 비트 경계에 주소를 할당한다. 이 스키마는 이전에 클래스-풀 시스템(class-full system)과 달리 클래스레스(classless)라고 부른다. IPv6에서는 64 비트의 네트워크 식별자가 사용된다.

2016.04.06

IPv4의 개인(Private) 주소

개인 네트워크는 반드시 인터넷에서 글로벌 액세스가 필요하지 않다. 주소의 일련의 이 결과는 이러한 개인 네트워크에 할당된다.

<표삽입>

주소의 마지막 세트는 홈 네트워크에 의해 사용되는 것을 인식할 수 있을지도 모른다. 개인 네트워크는 종종 NAT를 사용한 인터넷과 인터페이스한다. 이 기술은 인터넷에 액세스 하기 위한 하나의 로컬 IP 주소를 맵핑한다. 원래는 IPv4 주소의 부족을 해소하기 위해 도입되었다.

IPv4 주소 타입

IPv4를 지원하는 세 가지 주소 타입이 있다.

-유니캐스트(Unicast): 이 주소는 네트워크에서 하나의 노드를 식별하는 데 사용된다.
-멀티캐스트(Multicast): 이 주소는 네트워크 인터페이스의 그룹에 대응한다. 멤버(member)는 그룹에 참여하고 메시지는 그룹의 모든 멤버들에게 전송된다.
-브로드캐스트(Broadcast): 서브넷에 있는 모든 네트워크 인터페이스에게 메시지를 보낼 것이다.

Inet4Address 클래스는 IPv4 프로토콜을 지원한다. 다음 과정에서 이 클래스에 대해 상세히 살펴볼 것이다.

Page 51.

Inet4Address 클래스

Inet4Address 클래스는 InetAddress 클래스에서 파생된다. 파생 클래스로서, InetAddress 클래스의 많은 메소드는 오버라이드(override) 되지 않는다. 예를 들면, 여기에 나타나는 바와 같이 InetAddress 인스턴스를 얻기 위해서, 어떤 클래스의 getByName 메소드를 사용할 수 있다.

<소스>

어떤 경우에는, 베이스 클래스(base class) 메소드는 각각의 경우에서 사용되기 때문에 주소는 캐스팅 할 필요가 있다. Inet4Address 클래스는 InetAddress 클래스 이상의 어떤 새로운 메소드도 추가하지 않는다.

특별한 IPv4 주소

이러한 두 개를 포함한 여러가지 특별한 IPv4 주소가 있다.

-0.0.0.0: 이것은 불특정 IPv4 주소(와일드카드 주소)라고 하며, 일반적으로 네트워크 인터페이스는 IP 주소가 없는 경우 사용되고, DHCP를 사용하여 획득하려고 시도 할 때 사용된다.
-127.0.0.1: 이것은 루프백(loopback) 주소로 알려져있다. 그것은 테스트 목적으로 종종 자신에게 메시지를 보낼 수 있는 편리한 방법을 제공한다.

주소가 와일드카드 주소인 경우 isAnyLocalAddress 메소드는 true를 반환한다. true를 돌려주는 경우, 이 메소드는 여기에 설명된다.

<소스>

isLoopbackAddress 메소드는 다음에 표시되고 true를 반환한다.

<소스>

다음 장에서 서버를 테스트하기 위해 자주 사용될 것이다. 

이 외에도, 프로토콜 할당에서 사용되는 다른 특별한 주소는 IPv6에서 IPv4 교체 및 테스트 목적을 위해 사용되는 것이 포함된다. 이것들과 기타 특수 주소에 대한 자세한 내용은 https://en.wikipedia.org/wiki/IPv4#Special-use_addresses에서 찾을 수 있다.

Page 52.

Inet6Address 클래스 소개

IPv6 주소는 128 비트(16 진수)를 사용한다. 이것은 2 ^ 128개의 주소까지 허용한다. IPv6 주소는 콜론으로 구분된 각 4개의 16진수와 8개의 일련된 그룹으로 기록된다. 숫자는 케이스 인센시티브(case insensitive)이다. 예를 들면, 다음은 www.google.com의 IPv6 주소이다.

2607:f8b0:4002:0c08:0000:0000:0000:0067

IPv6 주소는 여러 방식으로 단순화될 수 있다. 그룹에 선행에 위치한 0(zero)을 생략할 수 있다. 위의 예제는 다음과 같이 다시 작성할 수 있다.

2607:f8b0:4002:c08:0:0:0:67

IPv6는 세 가지 주소 타입을 지원한다.

-유니캐스트: 단일 네트워크 인터페이스를 지정한다.
-애니캐스트: 이 주소 타입은 인터페이스의 그룹에 할당된다. 패킷이 이 그룹에 전송될 때, 그룹의 한 멤버는 종종 패킷에서 가까운 하나를 수신한다.
-멀티캐스트: 모든 그룹 멤버에게 패킷을 전송한다.

이 프로토콜은 브로드캐스트 주소를 지원하지 않는다. 네트워크 크기의 증가보다 IPv6가 더 많이 있다. 그것은 더 쉬운 관리, 보다 효율적인 라우팅 기능, 간단한 헤더 형식, NAT를 위한 필요성의 제거 같은 여러가지 개선을 포함한다.

IPv6의 개인 주소

개인 주소 공간은 IPv6에서 사용할 수 있다. 원래는 fec0::/10의 프리픽스(prefix)에서 블록을 사용한 사이트 로컬 주소(site-local address)를 사용했다. 그러나 이것은 그 정의 문제로 중단되었고, 주소 블록 fc00::/7를 사용한 UL(Unique Local) 주소로 대체되었다.

이러한 주소는 누구든지 생성할 수 있고, 조정되어야 할 필요가 없다. 그러나 반드시 전역적으로 고유하지 않다. 다른 사설 네트워크는 동일한 주소를 사용할 수 있다. 그들은 글로벌 DNS 서버를 사용하여 할당될 수 없고 로컬 주소 공간에 있는 라우팅 될 수 없다.

Page 53.

Inet6Address 클래스

당신은 IPv6 전용 어플리케이션을 개발하지 않는다면, 일반적으로, Inet6Address 클래스를 필수적으로 사용할 필요가 없다. 대부분의 네트워크 작업은 투명하게 처리된다.
Inet6Address 클래스는 InetAddress 클래스에서 파생된다. Inet6Address 클래스의 getByName 메소드는 다음과 같이, 발견한 첫 번째 주소를 반환하기 위해서 베이스 클래스(base class)인 InetAddrress 클래스의 getAllByName의 메소드를 사용한다. 이것은 IPv6 주소가 아닐 수도 있다.

<소스>

<박스 시작>
이 예제 중 일부가 제대로 실행되려면, 라우터는 IPv6 인터넷 연결을 지원하도록 구성해야 할 필요가 있다.
<박스 끝>

Inet6Address 클래스는 InetAddress 클래스에서 하나의 메소드를 추가했다. 이것은 IPv4 호환 가능한 IPv6 주소 섹션을 사용하여 설명하는 isIPv4CompatibleAddress 메소드이다.(확인할 것)

2016.04.07

특수한 IPv6 주소

64 네트워크 프리픽스로 이루어진 주소 블록이 있다.(2001:0000::/29 ~ 2001:01f8::/29) 이들은 특별한 요구에 사용된다. 세 가지는 IANA에 의해 할당되었다.
-2001::/32: 이것은 IPv4의 전환 기술인 테레도 터널링(teredo tunneling)이다.
-2001:2::/48: 이것은 벤치마킹 목적으로 사용된다.
-2001:20::/28: 이것은 암호화 해시 식별자가 사용된다.

대부분의 개발자들은 이러한 주소와 함께 작동할 필요가 없다.

IP 주소 타입 테스트

일반적으로, IP 주소가 IPv4 혹은 IPv6인지 여부와 관계가 없다. 둘 사이의 차이점은 다양한 프로토콜 레벨 깊숙히 감춰져있다. 당신이 그 차이를 알아야 할 때, 두 가지 방법 중 하나를 사용할 수 있다. getAddress 메소드는 바이트 배열을 반환한다. IPv4 혹은 IPv6인지 확인하기 위해서 바이트 배열의 크기를 확인한다.혹은 instanceof 메소드를 사용할 수 있다. 이 두 가지 방법은 여기에 표시된다.

<소스>

Page 54.

IPv4 호환 IPv6 주소의 사용

점선 쿼드 표기법(dotted quad notation)은 IPv6를 이용하여 IPv4 주소를 표현하는 방법이다. ::ffff: 프리픽스(prefix)는 IPv4 주소 혹은 16진수에 해당하는 것의 앞에 위치한다. 예를 들면, IPv4의 주소 74.125.21.105와 동일한 16진수는 4a7d1569이다. 모두 32 비트 수량을 나타낸다. 따라서, 다음 세 개의 주소는 동일한 웹 사이트를 나타낸다.

address = InetAddress.getByName("74.125.21.105");
address = InetAddress.getByName("::ffff:74.125.21.105");
address = InetAddress.getByName("::ffff:4a7d:1569");

displayInetAddressInformation 메소드를 이용하여 이 주소를 사용하는 경우, 다음과 같이, 출력은 동일하다.

/74.125.21.105
CanonicalHostName: yv-in-f105.1e100.net
HostName: yv-in-f105.1e100.net
HostAddress: 74.125.21.105
CanonicalHostName: 83.166.169.231

이것은 IPv4 호환 IPv6 주소라고 한다.

Inet6Address 클래스는 isIPv4CompatibleAddress 메소드를 보유한다. 메소드는 단지 IPv6 주소의 내부에 배치되는 IPv4 주소의 경우에 있어서 true를 반환한다. 이 경우에는 마지막 4바이트는 모두 제로(0)이다.

다음의 예제는 이 메소드를 사용할 수 있는 방법을 보여준다. www.google.com과 연관된 각 주소는 IPv4 혹은 IPv6 주소인지 여부를 확인하기 위해 테스트된다. 그것은 IPv6 주소인 경우, 메소드는 적용된다.

<소스>

Page 55.

출력은 사용가능한 서버에 따라 달라진다. 다음은 가능한 하나의 출력이다.

www.google.com/173.194.46.48 is not a IPv4 Compatible Address
www.google.com/173.194.46.51 is not a IPv4 Compatible Address
www.google.com/173.194.46.49 is not a IPv4 Compatible Address
www.google.com/173.194.46.52 is not a IPv4 Compatible Address
www.google.com/173.194.46.50 is not a IPv4 Compatible Address
www.google.com/2607:f8b0:4009:80b:0:0:0:2004 is not a IPv4 Compatible Address

다음은 자바 8로 대체하는 방법이다.

<소스>

Page 56.

네트워크 속성(property) 제어

많은 운영 체제에서, 기본 동작은 IPv6 대신 IPv4를 사용하는 것이다.

2016.04.21

이 동작을 제어하는 자바 어플리케이션을 실행하면 다음 JVM 옵션을 사용할 수 있다. 첫 번째 설정은 다음과 같다.

-Djava.net.preferIPv4Stack=false

이것은 기본 설정이다. IPv6을 사용할 수 있다면, 어플리케이션은 IPv4 혹은 IPv6 호스트를 사용할 수 있다. true로 설정하면, IPv4 호스트를 사용한다.

두 번째 설정은 사용되는 주소 유형을 다룬다.

-Djava.net.preferIPv6Addresses=false

이것은 기본 설정이다. IPv6을 사용할 경우, IPv6 주소보다 IPv4 주소를 더 선호할 것이다. 이것은 IPv4 서비스에 대한 후방 호환성을 허용하기 때문에 바람직하다. true로 설정하면 가능하면, 그것은 언제든지 IPv6 주소를 사용가능 할 것이다.

요약

2장에서는 기본 네트워크 용어 및 개념에 대한 개요를 제공했다. 네트워킹은 크고 복잡한 주제이다. 2장에서는 자바 네트워킹과 관련된 개념을 살펴봤다.

NetworkInterface 클래스를 설명하였다. 이 클래스는 네트워킹을 지원하는 컴퓨터에 연결된 장치에 대한 로우 레벨 엑세스를 제공한다. 또한 디바이스의 MAC 주소를 획득하는 방법을 배웠다.

자바에서 인터넷 접속 제공에 대하여 살펴보았다. IP 프로토콜 기본에 대해 살펴보았다. 이 프로토콜은 InetAddress 클래스에 의해 지원된다. 자바는 각각 IPv4와 IPv6 주소를 지원하기위해 Inet4Address 혹은 Inet6Address의 클래스를 사용한다.

우리는 또한 URI와 URL 클래스의 예제를 살펴보았다. 이러한 클래스는 특정 인스턴스에 대한 자세한 정보를 얻을 수 있도록 여러 가지 메소드를 보유하고 있다. 추가 처리과정을 위한 부분으로 URI 혹은 URL을 분할하는 이러한 메소드를 사용할 수 있다.

또한 일부 네트워크 연결 속성을 제어하는 방법을 논의했다. 다음 장에서 이 주제에 대해 좀 더 자세하게 살펴볼 것이다.

이러한 기초를 바탕으로, 지금 네트워킹을 지원하는 NIO 패키지의 사용으로 전진하고 해결할 수 있다. NIO는 버퍼 지향과 논블록킹(nonblocking) IO를 지원한다. 더욱이, 많은 IO 작업을 위한 우수한 성능을 제공한다.

Page 57.

3. 네트워크 NIO 지원

3장에서는 자바의 NEW IO(NIO) 패키지의 버퍼 및 채널 클래스를 살펴볼 것이다. NIO는 JAVA IO API와 네트워크 API의 일부분에 대한 대안이다. NIO는 광범위하고 복잡한 주제이지만, 우리의 관심은 네트워크 애플리케이션에 대한 지원을 제공하는 방법이다.

다음과 같은 여러 주제를 살펴볼 것이다.

- 버퍼(buffer), 채널(channel) 및 셀렉터(selector) 사이의 자연스러운 관계
- 클라이언트/서버를 구축할 수 NIO 기술의 사용
- 여러 클라이언트를 처리하는 과정
- 비동기 소켓 채널을 지원
- 기본 버퍼 작업

NIO 패키지는 효율적인 네트워크 애플리케이션을 구축하기 위해 광범위한 지원을 제공한다.

자바 NIO

자바 NIO는 세 가지 핵심 클래스를 사용한다.

-버퍼: 읽거나 채널에 기록된 정보를 보유한다.
-채널: 이것은 데이터 소스(source)/싱크(sink)를 위한  비동기 읽기(read)/쓰기(write) 작업을 지원하는 스트림과 같은 기술이다.
-셀렉터: 이것은 싱글 스레드에서 다중 채널을 처리할 수 있는 메커니즘(mechanism)이다.

Page 58.

개념적으로, 버퍼와 채널은 데이터를 처리하기 위해 함께 작동한다. 다음 그림에 보여주는 바와 같이, 데이터는 버퍼 및 채널 간의 어느 방향으로 이동될 수 있다.

<그림>

버퍼는 데이터를 처리하기 위해 내부적으로 사용되는 반면, 채널은 일부 외부 데이터 소스에 연결된다. 채널과 버퍼는 여러 타입이 있다. 이들 중의 일부는 다음 표에 나열되어 있다.

다음은 채널에 대한 표이다.

채널 클래스 / 목적

FileChannel / 파일에 연결한다.
DatagramChannel / 데이타그램 소켓을 지원한다.
SocketChannel / 스트리밍 소켓을 지원한다.
ServerSocketChannel / 소켓 요청을 수신한다.
NetworkChannel / 네트워크 소켓을 지원한다.
AsynchronousSocketChannel / 비동기 스트리밍 소켓을 지원한다.

다음은 버퍼의 테이블이다.

버퍼 클래스 / 데이터 타입
<표 삽입>






