Page 29.

IP 프로토콜은 표준화된 문서가 있다.

RFC 790-지정번호: 이 규격은 네트워크 번호의 형식을 다룬다. 예를 들면, IPv4의 A, B, C 클래스는 본 명세서에서 정의된다(https://tools.ietf.org/html/rfc790).
RFC 1918-개인 인터넷에 대한 주소 할당: 이 규격은 개인 주소가 할당되는 방법과 연관이 있다. 여러 개인 주소가 하나의 공용 주소와 연관될 수 있다(https://tools.ietf.org/html/rfc1918).
RFC 2365—행정상 IP 멀티캐스트 범위: 이 사양은 멀티캐스트 주소 공간을 정의하고 어떻게 구현되는지 알 수 있다. IPv4 및 IPv6 멀티캐스트 주소 공간 간의 매핑이 정의된다(https://tools.ietf.org/html/rfc2365).
RFC 2373—IPv6의 주소 체계: 이 규격은 IPv6 프로토콜, 그 형식 및 IPv6에서 지원하는 다양한 어드레스 유형을 확인한다(http://www.ietf.org/rfc/rfc2373.txt).

여기에서 살펴본 많은 개념은 가능한 자바 코드의 예제로 설명할 것이다. 네트워크에 대한 이해를 시작하자.

네트워크 기본의 이해

네트워크는 네트워크 아키텍처를 생성하기 위한 결합 노드와 링크로 구성된다. 인터넷에 연결된 디바이스는 노드라고 부른다. 컴퓨터 노드는 호스트라고 한다. 노드 간의 통신은 HTTP 혹은 UDP와 같은 프로토콜을 이용한 링크를 따라 수행된다.

링크는 동축 케이블, 트위스트 페어, 그리고 광케이블 같은 유선이거나 전자레인지, 휴대전화, Wi-Fi 인터넷 혹은 위성 통신같이 유선으로 할 수 있다.이러한 다양한 링크는 특별한 통신 요구 사항을 해결하기 위해 다른 대역폭 및 처리량을 지원한다.

노드는 NIC(Network Interface Controller), 브리지, 스위치, 허브, 라우터 같은 디바이스를 포함한다. 그들은 컴퓨터 간에 다양한 형태의 데이터 전송에 모두 연관된다.

IP 주소를 가진 NIC는 컴퓨터의 일부이다. 브리지(Bridge)는 작은 것에서 고장나게된 거대한 네트워크를 허용하는 두 개의 네트워크 세그먼트가 연결된다.(?) 리피터(Repeater)와 허브(Hub)는 강도를 증폭하는 신호를 주로 재전송하기 위해  사용된다.

Page 30.

허브, 스위치, 라우터는 서로 유사하지만 복잡성은 다르다. 허브는 여러 개의 포트를 다루고 모든 접속된 포트로 간단하게 데이터를 전송한다. 스위치는 트래픽 기반의 데이터를 보낼 위치를 배울 것이다. 라우터는 메시지를 처리하고 라우팅하도록 프로그램 될 수 있다. 라우터는 많은 네트워크에서 유용하며, 대부분의 홈 네트워크는 라우터를 사용한다.

메시지는 가정용 컴퓨터에서 인터넷을 통해 보내졌을 때, 몇가지 일들이 일어나고 있다. 컴퓨터의 주소는 세계적으로 유일하지 않다. 인터넷을 사용할 수 있는 주소를 변경하는 NAT(Network Address Translation) 디바이스에 의해 다루는 컴퓨터로부터 전송된 메시지는 요구한다. 하나의 IP 주소는 홈 LAN 같이, 네트워크의 여러 디바이스에서 이용될 수 있다.

컴퓨터는 다른 네트워크에서 게이트웨이 역할을 하는 프록시 서버를 사용할 수 있다. 자바는 Proxy 클래스와 ProxySelector 클래스를 사용하여 프록시에 대한 지원을 제공한다. 우리는  9장, '네트워크 상호 운용'에서 살펴볼 것이다.

메시지는 주로 방화벽을 통해 연결된다. 방화벽은 악의적인 의도로부터 컴퓨터를 보호한다.

네트워크 아키텍처와 프로토콜

2016.03.23 

일반적인 네트워크 아키텍처는 버스(bus), 스타(star), 트리(tree) 타입의 네트워크가 있다. 이러한 물리적인 네트워크들은 가상 네트워크인 오버레이 네트워크를 지원하기 위해 사용된다. p2p 애플리케이션과 같은 이러한 네트워크는 애플리케이션을 지원하는 네트워크 아키텍처를 생성하기 위해 근본적인 네트워크를 추상화한다.

두 개의 컴퓨터가 통신할 때, 프로토콜을 사용한다. 네트워크의 여러 계층에서 사용되는 다양한 프로토콜이 있다. 주로 HTTP, TCP, UDP 및 IP를 살펴볼 것이다.

네트워크가 다양한 작업 및 프로토콜을 지원하기 위해 위치하는 방법을 묘사한 여러 모델이 있다. 하나의 일반적인 모델은 7개의 계층으로 구성된 OSI(Open Systems Interconnection) 모델이다. 네트워크 모델의 각 계층은 하나 이상의 프로토콜을 지원할 수 있다. 여러 프로토콜의 관계는 다음 표에 나타낸다.

하이 레벨 프로토콜을 지원하는 특정화된 작업
애플리케이션 레이어를 위한 데이터 전달 및 처리지원
세션관리
데이터 패킷관리
패킷 전송
네트워크 세그먼트 간 데이터 전송
로우 데이터 처리

Page 31.

OSI 레이어를 위한 더 많은 프로토콜 목록은 https://en.wikipedia.org/wiki/List_of_network_protocols_(OSI_model)에서 찾을 수 있다. 우리는 이러한 모든 프로토콜을 알 수 없고, 자바 SDK에서 지원하는 더 중요한 것들에 살펴볼 것이다.

2016.03.24

서버에서 클라이언트로 웹 페이지의 전송을 생각해라. 그것이 클라이언트에게 전송되고, 자주 각 헤더와 풋터를 포함하는 데이터는 TCP, IP, 링크 레벨 프로토콜 메시지에서 더 캡슐화된 HTTP 메시지에서 캡슐화된다. 이 캡슐화된 헤더 세트는 원래 HTML 파일이 표시될 때까지 데이터가 각 캡슐화된 헤더를 위해 추출된 곳에서 목적지 클라이언트에게 인터넷으로 전송된다.

다행히도, 이 과정의 세부 내용에 익숙할 필요가 없다. 클래스의 대부분은 데이터에 집중할 수 있도록 발생하는 방법을 숨긴다.

트랜스포트 레이어(transport layer)의 관심있는 프로토콜은 TCP 및 UDP이다. TCP는 UDP보다 신뢰할 수 있는 통신 프로토콜을 보장한다. 그러나 UDP는 전송이 강력한 필요가 없는 짧은 메시지에 더 적합하다. 스트리밍 데이터는 흔히 UDP를 사용한다.

UDP와 TCP의 차이점은 다음 표에 설명된다.

연결 : 연결형 / 비연결형
신뢰성 : 높음 / 낮음
패킷의 순서 : 순서보장 / 순서 잠재적 손실
데이터의 경계 : 패킷 병합 / 패킷 분리
전송 시간 : UDP보다 느림 / TCP보다 빠름
오류 검사 : 예 / 예, 그러나 복구 옵션 없음
통지 : 예 / 아니오
무게 : 더 많은 지원을 필요한 무거운 무게 / 지원이 덜한 경량 무게

Page 32.

TCP는 HTTP, SMTP(Simple Mail Transfer Protocol), FTP(File Transfer Protocol)와 같은 다양한 프로토콜에서 사용된다. UDP는 영화와 같은 미디어를 스트리밍하기 위한 DNS와 VOIP(Voice Over IP)에서 사용된다.

NetworkInterface 클래스 사용

NetworkInterface 클래스는 네트워크에서 노드로 작동하는 디바이스에 접속하는 수단을 제공한다. 이 클래스는 또한 로우 레벨 디바이스 주소를 얻을 수 있는 수단을 제공한다. 많은 시스템은 동시에 다중 네트워크에 접속된다. 이들은 네트워크 카드 같은 유선이거나 무선 LAN 혹은 블루투스 연결을 위한 무선일지도 모른다.

NetworkInterface 클래스는 IP 주소를 나타내고, 이 IP 주소에 대한 정보를 제공한다. 네트워크 인터페이스는 컴퓨터와 네트워크 간의 접속점이다. 이것은 주로 어떤 종류의 NIC를 사용한다. 그것은 물리적 표시을 가질 필요는 없지만, 루프백 접속 완료로서 소프트웨어로 수행 될 수 있다(IPv4는 127.0.0.1, IPv6는 ::1).

NetworkInterface 클래스는 public 생성자가 없다. 3개 정적 메서드는 NetworkInterface 클래스의 인스턴스를 반환하기 위해 제공된다.

-getByInetAddress: IP 주소를 안다면 사용된다.
-getByName: 인터페이스 이름을 단다면 사용된다.
-getNetworkInterfaces: 사용 가능한 인터페이스 목록를 제공한다.

다음 코드는 현재 컴퓨터의 네트워크 인터페이스 목록을 획득하고 표시하는 getNetworkInterfaces 메소드의 사용 방법을 보여준다.

예제

Page 33.

한 가지 가능한 출력은 다음과 같지만, 뒷부분은 생략한다.

...

다음에 보여진것과 같이 어떤것이 존재하는 경우, getSubInterfaces 메소드는 서브인터페이스 목록을 반환할 것이다. 하나의 물리적 네트워크 인터페이스가 라우팅 목적을 위한 논리적 인터페이스로 분할될 때 서브인터페이스가 발생한다.

Enumeration<NetworkInterface> interfaceEnumeration =         element.getSubInterfaces();

각 네트워크 인터페이스는 하나 이상의 연관된 IP 주소를 가질 것이다. getInetAddresses 메소드는 이 주소의 Enumeration을 반환한다. 다음에 보여주는 것과 같이, 네트워크 인터페이스 초기 목록은 연관된 IP 주소의 표시를 위해 증강되었다.

소스

Page 34.

다음은 가능한한 결과다.

...

우리는 또한 다음과 같은 자바 8 기술을 사용할 수 있다. 스트림과 람다식은 동일한 결과를 보여주는 IP 주소를 표시하기 위해 사용된다.

소스

네트워크 연결에 대한 상세한 것을 보여주는 위한 다양한 InetworkAddress 메소드 있다. 우리는 이러한 문제가 발생하여 그들은 논의될 것이다.

Page 35.

Mac 주소 획득

2016.03.28 

MAC(Media Access Control) 주소는 NIC를 식별하는 데 사용된다. MAC 주소는 보통 NIC의 제조자에 의해 할당되고 하드웨어의 일부이다. 노드의 각 NIC는 고유한 MAC 주소가 있어야한다. 이론적으로, 장소에 관계없이 모든 NIC는 고유한 MAC 주소가 부여될 것이다. MAC 주소는 일반적으로 16 진수의 6개의 쌍으로 구성된 그룹에 48 비트로 구성된다. 이 그룹은 대시(/) 혹은 콜론(;) 중 하나에 의해 구분된다.

특정한 Mac 주소 획득

일반적으로, 보통 자바 프로그래머는 MAC 주소가 필요하지 않다. 그러나 필요할 때마다 찾을 수 있다. 다음 메소드는 IP 주소 및 NetworkInterface 인스턴스에 대한 MAC 주소를 포함하는 문자열을 반환한다. getHardwareAddress 메소드는 숫자로 구성된 바이트 배열을 반환한다. 이 배열은 MAC 주소로 표시된다. 이 코드 세그먼트 로직의 대부분은 tertiary operator가 대시를 표시여부를 결정하는 출력을 포맷에 전념한다.

소스

다음 예제는 로컬호스트를 사용하여 메소드를 설명한다.

소스

Page 36.

출력은 사용하는 컴퓨터에 따라 달라질 수 있다. 다음은 하나의 가능한 출력이다.

IP address: 192.168.1.5
MAC address: EC-0E-C4-37-BB-

<<박스시작>>
getHardwareAddress 메소드는 로컬호스트 MAC 주소에 접속할 수 있다. 원격 MAC 주소에 접속하는 데는 사용할 수 없다.
<<박스끝>>

다중 MAC 주소 획득

모든 네트워크 인터페이스는 MAC 주소를 가진다. 여기에서 보여주는데로, getNetworkInterfaces 메소드를 사용하여 생성되는 열거형(enumeration)은 각각 네트워크 인터페이스으로 표시된다.

소스

다음은 하나의 가능한 출력이다. 결과는 책 지면상 일부분만 보여준다.

Name    MAC Address
lo      ---
eth0    ---
eth1    8C-DC-D4-86-B1-05
wlan0   EC-0E-C4-37-BB-72
wlan1   EC-0E-C4-37-BB-72
net0    ---
net1    00-00-00-00-00-00-00-E0
net2    00-00-00-00-00-00-00-E0
...

Page 37.

대안으로, 우리는 다음과 같은 자바 구현을 사용할 수 있다. 그것은 스트림에서 열거형으로 변환 한 후 스트림의 각 요소를 처리한다.

소스

스트림의 힘은 특정 인터페이스를 필터링하거나 인터페이스를 다른 데이터 타입으로 변환하는 같은 추가 처리를 수행해야하는 경우에 발생한다.

네트워크 주소 개념

여러 유형의 네트워크 주소가 있다. 주소는 네트워크의 노드를 식별하는 역할을 한다. 예를 들면, IPX(Internetwork Packet Exchange) 프로토콜은 네트워크에서 노드에 접속하는 데 사용된 초기 프로토콜이다. X.25는 WAN(Wide Area Network) 패킷 스위칭에 적합한 프로토콜이다. MAC 주소는 물리적 네트워크 레벨에서 네트워크 인터페이스에 대한 고유 식별자를 제공한다. 그러나  주 관심 분야는 IP 주소입니다.

URL/URI/URN

이 용어들은 인터넷 리소스의 이름과 위치를 참조하는 데 사용된다. URI는 웹 사이트 혹은 인터넷상의 파일과 같은 리소스의 이름을 식별한다. 리소스의 이름과 위치를 포함 할 수도 있다.

URL은 리소스가 위치하고 있는 장소와 어떻게 검색하는지 구별한다.










