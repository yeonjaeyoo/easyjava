3장 주석

It is an interface that helps to eliminate morphological affixes from the tokens and the process is known as stemming.
그것은 토큰에서 형태학상 접사를 제거하는 데 도움이 되는 인터페이스이고, 프로세스는 스테밍으로 알려졌다.

Eliminate affixes from token and stem is returned.
토큰에서 접사를 제거하고 어간이 반환된다.

Page 59.

Eliminate words which occur often and have not much significance from context point of view.
자주 발생하고 뷰의 컨텍스트 포인트에서 중요하지 않은 단어를 제거한다.

Perform the task of splitting text into stop words and tokens.
텍스트를 불용어와 토큰으로 분할하는 작업을 수행한다.

In the document vectors,  generate the keyword for the given position of element.
문서 벡터에서, 지정된 위치의 요소에 대한 키워드를 생성한다.

Perform mapping of text into strings
문자열로 텍스트의 매핑을 수행한다.

Eliminate common words that have no search significance
검색 의미가 없는 일반적인 단어를 제거한다.

Initialise the vector with 0's
0으로 벡터를 초기화

simple Term Count Model is used
simple Term Count 모델이 사용된다.

Attach a position to keywords that performs mapping with dimension that is used to depict this token
이 토큰을 묘사하는 데 사용되는 차원과 매핑을 수행하는 키워드 위치를 연결한다.

Page 65.

품사 태그는 단어가 명사, 동사, 형용사 등인지의
=>품사 태그는 단어가 명사, 동사, 형용사 등의

많은 애플리케이션이 있다.
=>품사 태깅의 많은 애플리케이션이 있다.

-기계 학습 알고리즘을 선택
=>- 기계 학습 알고리즘 선택

품사 태그 소개
=> 품사 태깅 소개

품사 태그는
=> 품사 태깅은

POS 태그를
=> POS 태깅을

생각해 보자.
=>살펴본다.

Page 66.

다음 태거는 태그를 위해 
=>다음 태거는 대깅을 위해

Page 67.

정규 표현식도 조회할 수 있는
=>정규 표현식도 질의할 수 있는

Page 68.

POS 태그를 
=>POS 태깅을

또한 animal은 명사를 의미한다.
=> 또한 동물을 의미하는 명사이다.

이제 튜플의 시퀀스가 지정된 텍스트로부터 생성될 수 있는 예제를 살펴 보자.
=> 이제 지정된 텍스트로부터 튜플의 시퀀스가 생성될 수 있는 예제를 살펴 보자.

지금, 단어 및 태그로 튜플 변환하는 ~ 살펴 보자.
=> 지금, 튜플(word 및 pos 태그)을 단어 및 태그로 변환하는 다음 코드를 살펴보자.

Page 69.

몇 가지 일반적인
=>일반적인

생각한다.
=>고려한다.

또한 파이썬에서 ~ 제공할 수 있다.
=>파이썬에서도 딕셔너리를 사용하여 POS 태그를 토근에 제공할 수 있다.

파이썬에서 ~ 살펴 보자.
=> 파이썬에서 딕셔너리를 사용한 튜플(word:pos 태그)의 생성을 보여주는 다음 코드를 살펴보자.

Page 70.

기본 태그
=> 기본 태깅

choose_tag() ~ 구현해야 한다.
=> S~Taggger는 choose_tag() 메소드를 구현해야한다.

이 메소드는
=>choose_tag() 메소드는

인수를
=>인자를

다음 코드를 보자.
=> 다음 코드를 살펴보자.

이 함수를
=>nltk.tag.untag() 함수를

Page 71.

태그 해제 문장의
=> 언태깅된 문장의

코퍼스는
=>코퍼스(corpus)는

홈 디렉토리
=> home 디렉토리

데이터 디렉토리를
=> data 디렉토리를

개최하는
=>보유하는

important 이름의
=>important라는 이름의

가 될 것이다.
=>일 것이다.

Page 72.

여기에서는, 이전의 코드에서
=> 여기, 이전 코드에서는

해석 할 수
=>해석할 수

구성되어 있다.
=>구성된다.

구성되어 있다.
=>구성된다.

Page 73.

2016.11.07

Page 77.

사용하여 태그의
=>사용한 태깅의

위한 태그와
=>을 위한 태그가 제공되고

특정 문맥에서
=>주어진 컨텍스트에서

빈도수를
=>빈도를

컷오프 값에 특정 값을
=> 특정 값을 컷오프 값에

백오프 태그는
=>백오프 태깅은

전달 될 수 
=>전달될 수

백오프를 사용하는
=>백오프 태깅을 사용하는

그 다음 태거가
=> 다음 태거가

Page 78.

컨텍스트 정보
=>상황 정보

확인한다.
=>살펴본다.

를 위한
=>에 대한

Page 79.

부착 태거
=>접사 태거

Page 80.

훈련 텍스트
=>트레이닝 텍스트

bigrams, 트라이 그램
=>바이그램, 트라이그램

가장 올바른
=> 가장 좋은

Page 81.

라벨에
=>라벨링에

문장의 분할
=> 청킹은 문장의 분할

구문 트리는
=>파스 트리는

Page 82.

명사 구문 ~ 생성되는
=> 명사의 수로 생성되는 명사 구문 청크 규칙에서

수행하기 위해 NLTK에서
=> 수행하기 위해 개발된 NLTK에서

POS 태그의 사용되는 방법
=>POS 태깅의 사용되는 방법

또한, ~ 살펴봤고
=> ~ 통계 모델링도 살펴봤고

논의할 것이다.
=>살펴볼 것이다.

Page 85.

5장. 파싱 - 트레이닝 데이터 분석

Page 91.

자연 언어을
=> 자연 언어를

시작기호
=> 시작기호(S)

생성 규칙(P) : A->a

네 개의
=>4개의

선언적 문장
=>평서문

필수 문장
=>명령문

제목
=>주어

처리
=>다룬다.

Page 92.

질문
=>질의

답변
=>응답

뜨는
=>혹은

질문
=>질문이다.

일반 CFG
=>일반적인 CFG

여기에 요약된다.
=> 다음과 같다.

Page 93.

다음과 같이 ATIS에서 테스트 문장을 추출한다.
=>ATIS에서 테스트 문장을 추출하는 것은 다음과 같다.

Page 97.

생산 규칙
=>생성 규칙

부착된다.
=>추가된다.

CFG 같은
=>CFG와 동일한

확률을 할당한다.
=>확률도 할당한다.

파스 트리 확률은
=>파스된 트리 확률은

모든 생산 규칙 확률의
=>모든 생성 규칙의 확률의

Page 98.

파싱 단점은
=>파싱의 단점은

그래서,
=>그래서

간단한
=> 가장 간단한

Page 99.

Page 100.

주어졌다.
=>진행됐다.

이 알고리즘은
=>Earley 알고리즘은

필요로하지
=>필요로 하지

그것은 ~ 채운다.
=> 그것은 왼쪽에서 오른쪽 매너로 차트로 채운다.

Page 105.

구현을 위한
=>구현에 대한

Page 106.

Treebank ~ 접속하고,
=> Treebank ~ 접속한 파싱과,

사용하여
=>사용한










