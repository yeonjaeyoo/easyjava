Page 273.

9장. 이미지 상상

거의 매일 기본적으로 이미지로 작업한다. 페이스북 프로필 페이지로 이미지를 업로드하거나 모바일 혹은 웹 애플리케이션을 개발하는 동안 이미지를 조작한다. 풍부한 유스 케이스가 있다. 컴퓨터 비전 분야에서 많은 진보와 함께 이미징은 중요한 분야가 됐다. 이미지 작업은 파이썬에서는 하찮은 작업이다.

9장에서는 다음과 같은 레시피를 다룰 것이다.

-이미지 전환
-리사이징, 자르기 및 썸네일 생성
-복사-붙여 넣기 및 이미지 워터 마킹
-이미지 차이와 비교
-얼굴 감지
-비즈니스 프로세스로 이미지 생성

소개

전자 세계의 이미지는 0과 1로 구성된 비트이다. 그것들은 장면이나 문서의 전자 스냅샷이다. 그림 혹은 사진조차도 디지털화하여 이미지를 형성할 수 있다. 이미지를 더 깊이 이해하고 이미지가 어떻게 구성되어 있는지 살펴보자.

모든 이미지는 샘플링되며 픽셀(pixels)이라는 점 격자로 표시된다. 이 픽셀은 화면에 표시된 그림의 최소 제어 가능 요소를 나타낸다. 이미지에서 사용할 수 있는 픽셀 수가 많을수록 장치 화면에서는 이미지가 더 정확하게 표시된다.

Page 274.

각 픽셀의 강도(intensity)는 가변적이다. 디지털 세계에서 이미지의 색상은 gred, green 및 blue(RGB) 또는 Cyan, Magenta, Yellow 및 Black(CMYK)의 세 가지 혹은 네 가지 강도로 표현된다. 컴퓨터 프로그램은 종종 RGBA 형식의 색상을 나타내며, 여기서 A는 알파(또는 색상의 투명도)를 나타낸다. 각 픽셀은 RGBA 형식의 이진 표현으로 표현되며 시퀀스로 컴퓨터에 의해 저장된다. 컴퓨터는 디스플레이를 위해 이 순서를 읽고 경우에 따라 인쇄용 아날로그 버전으로 변환한다. 특정 이미지 속성을 자세히 살펴보자.

이미지 속성

이미지 속성의 일부를 살펴보자.

-이미지 크기: 앞서 배웠듯이 컴퓨터 이미지는 0과 1로 저장되며 픽셀(직사각형 점) 단위로 측정된다. 이미지의 파일 크기는 포함된 픽셀 수와 저장된 색상 정보의 양에 따라 계산된다. 실제로 파일 크기는 컴퓨터 하드 드라이브의 이미지가 차지하는 공간이다.
-비트 심도(Bit depth): 단일 픽셀의 색상을 나타내는 데 사용되는 비트 수이다. 이 개념은 픽셀을 설명하는 데 사용되는 비트 수를 나타내는 픽셀 당 비트 수로 정의할 수 있다. 이미지의 비트 심도가 클수록 저장할 수 있는 색의 숫자는 커진다. 1 비트 이미지에는 0과 1의 2개(2 ^ 1)의 색만 저장할 수 있으므로 흰색과 흑백으로 표시된다. 그것과 비교할 때, 8 비트 이미지는 256(2^8) 색상을 저장할 수 있다.
-이미지 해상도: 해상도는 이미지의 픽셀 수를 나타낸다. 해상도는 때때로 이미지의 폭(width)과 높이(height)로 식별된다. 예를 들어 1,920 x 1,024 픽셀 해상도의 이미지는 1,966,080 픽셀을 포함하거나 1.9-메가픽셀 이미지이다.
-화질: 이미지가 저장하는 정보에 따라 변경할 수 있다. 모든 이미지가 이미지를 나타내기 위해 모든 픽셀을 저장해야 하는 것은 아니다. 예를 들어, 사진의 푸른 바다의 연속 블록은 모든 픽셀을 가질 필요는 없으며 이미지는 이미지 품질을 손상시키지 않으면서 이미지의 디스크 공간을 줄이기 위해 압축될 수 있다. 이러한 디스크 공간의 축소를 압축이라한다. 높은 압축은 눈에 띄는 세부 묘사를 의미한다. 오늘날의 세계에서 사용되는 일반적인 압축 유형은 JPG 압축이며, 크기 및 이미지 품질을 희생한다.

Page 275.

-이미지 형식: 이미지는 다른 확장명을 가진 컴퓨터에 저장된다. BMP 혹은 TIF와 같은 형식은 전혀 압축되지 않는다. 따라서 더 많은 디스크 공간을 차지한다. JPG와 같은 파일은 압축할 수 있으며 압축 수준을 선택할 수도 있다. 따라서 TIF 이미지는 무손실이고 JPG 압축은 손실 압축(lossy compressions)이라고 한다. 손실 압축은 사람의 음영 차이를 차별화하지 못하는 것을 사용한다는 점이 흥미롭다. 다수의 손실이 있는 변환은 이미지 품질 저하를 초래하지만 여러 번의 무손실 변환은 이미지 품질을 보존한다. 그러나 일반적으로 압축과 관련하여 이미지 저하와 크기 사이의 절충점이다.

좋아, 좋은 시작이다. 9장에서는 이미지에 대한 더 많은 개념을 살펴보고 파이썬으로 이미지에서 수행할 수 있는 다양한 작업을 다룬다. 이미지를 조작하는 데 도움이 되는 여러 모듈을 살펴볼 것이다. 9장의 마지막 부분에서는 9장에서 다룬 레시피를 활용한 지식으로 자동화할 수 있는 일반적인 비즈니스 프로세스에 대해서도 다룰 것이다.

9장에서는 다음 파이썬 모듈을 사용한다.

-Pillow(https://pypi.python.org/pypi/Pillow)
-scipy(https://www.scipy.org/)
-opencv(https://pypi.python.org/pypi/opencv-python)

이미지 변환하기

간단한 예제를 들어 이미지 여행을 시작하자. 그러나 계속하기 전에 가상 환경을 구축하자.

1. virtualenv 커맨드를 사용하여 가상 환경을 구축하고 활성화한다.

<소스>

2. 좋아! 이제 9장에 대한 레시피로 작업할 독립적인 환경을 구성했다. 첫 번째 예제에서는 파이썬의 Pillow 모듈을 사용한다. 레시피로 가기 전에 먼저 이 모듈을 설치하자. Pillow 모듈을 설치하기 위해 가장 좋아하는 python-pip를 사용할 것이다.

<소스>

이제 환경이 생겼고 Pillow 모듈도 설치됐다. 이제 레시피 작업 준비가 끝났다.




